// -----

// ## Importa√ß√µes Din√¢micas

// As declara√ß√µes `export` e `import` que abordamos em cap√≠tulos anteriores s√£o chamadas de **"est√°ticas"**. A sintaxe √© muito simples e rigorosa.

// Primeiro, n√£o podemos gerar dinamicamente nenhum par√¢metro de `import`.

// O caminho do m√≥dulo deve ser uma **string primitiva**, n√£o pode ser uma chamada de fun√ß√£o. Isso n√£o funcionar√°:

// ```javascript
// import ... from getModuleName(); // Erro, apenas de "string" √© permitido
// ```

// Segundo, n√£o podemos importar condicionalmente ou em tempo de execu√ß√£o:

// ```javascript
// if(...) {
//   import ...; // Erro, n√£o permitido!
// }
// {
//   import ...; // Erro, n√£o podemos colocar import em nenhum bloco
// }
// ```

// Isso ocorre porque `import`/`export` visam fornecer uma base para a estrutura do c√≥digo. Isso √© bom, pois a estrutura do c√≥digo pode ser analisada, os m√≥dulos podem ser reunidos e empacotados em um √∫nico arquivo por ferramentas especiais, e as exporta√ß√µes n√£o utilizadas podem ser removidas ("tree-shaken"). Isso s√≥ √© poss√≠vel porque a estrutura de importa√ß√µes/exporta√ß√µes √© simples e fixa.

// Mas como podemos importar um m√≥dulo dinamicamente, sob demanda?

// -----

// ### A express√£o `import()`

// A express√£o `import(module)` carrega o m√≥dulo e retorna uma **promise** que se resolve em um **objeto de m√≥dulo** que cont√©m todas as suas exporta√ß√µes. Ela pode ser chamada de qualquer lugar no c√≥digo.

// Podemos us√°-la dinamicamente em qualquer lugar do c√≥digo, por exemplo:

// ```javascript
// let modulePath = prompt("Qual m√≥dulo carregar?");

// import(modulePath)
//   .then(obj => /* <objeto do m√≥dulo> */)
//   .catch(err => /* <erro de carregamento, por exemplo, se o m√≥dulo n√£o existe> */);
// ```

// Ou, poder√≠amos usar `let module = await import(modulePath)` se estiv√©ssemos dentro de uma fun√ß√£o `async`.

// Por exemplo, se tivermos o seguinte m√≥dulo `say.js`:

// ```javascript
// // üìÅ say.js
// export function hi() {
//   alert(`Ol√°`);
// }

// export function bye() {
//   alert(`Tchau`);
// }
// ```

// ...Ent√£o a importa√ß√£o din√¢mica pode ser assim:

// ```javascript
// let {hi, bye} = await import('./say.js');
// hi();
// bye();
// ```

// Ou, se `say.js` tiver a exporta√ß√£o padr√£o:

// ```javascript
// // üìÅ say.js
// export default function() {
//   alert("M√≥dulo carregado (export default)!");
// }
// ```

// ...Ent√£o, para acess√°-lo, podemos usar a propriedade `default` do objeto do m√≥dulo:

// ```javascript
// let obj = await import('./say.js');
// let say = obj.default;

// // ou, em uma linha: let {default: say} = await import('./say.js');
// say();
// ```

// Aqui est√° o exemplo completo:

// ```html
// <!doctype html>
// <script>
//   async function load() {
//     let say = await import('./say.js');
//     say.hi(); // Ol√°!
//     say.bye(); // Tchau!
//     say.default(); // M√≥dulo carregado (export default)!
//   }
// </script>
// <button onclick="load()">Clique em mim</button>
// ```

// **Observa√ß√£o:**

//   * Importa√ß√µes din√¢micas funcionam em **scripts regulares**, elas n√£o exigem `script type="module"`.
//   * Embora `import()` pare√ßa uma chamada de fun√ß√£o, √© uma **sintaxe especial** que por acaso usa par√™nteses (semelhante a `super()`). Ent√£o, n√£o podemos copiar `import` para uma vari√°vel ou usar `call`/`apply` com ele. **N√£o √© uma fun√ß√£o.**