// **Iter√°veis**

// Objetos iter√°veis s√£o uma generaliza√ß√£o dos arrays. Esse √© um conceito que permite tornar qualquer objeto utiliz√°vel em um loop `for..of`.

// Claro, arrays s√£o iter√°veis. Mas h√° muitos outros objetos internos que tamb√©m s√£o iter√°veis. Por exemplo, strings tamb√©m s√£o iter√°veis.

// Se um objeto n√£o √© tecnicamente um array, mas representa uma cole√ß√£o (como uma lista ou conjunto) de algo, ent√£o `for..of` √© uma √≥tima sintaxe para percorr√™-lo. Vamos ver como fazer isso funcionar.

// **Symbol.iterator**

// Podemos entender facilmente o conceito de iter√°veis criando um por conta pr√≥pria.

// Por exemplo, temos um objeto que n√£o √© um array, mas parece adequado para `for..of`.

// Como um objeto que representa um intervalo de n√∫meros:

// ```js
// let range = {
//   from: 1,
//   to: 5
// };

// // Queremos que o for..of funcione assim:
// // for(let num of range) ... num = 1, 2, 3, 4, 5
// ```

// Para tornar o objeto `range` iter√°vel (e assim permitir o uso de `for..of`), precisamos adicionar a ele um m√©todo chamado `Symbol.iterator` (um s√≠mbolo interno especial para isso).

// * Quando `for..of` come√ßa, ele chama esse m√©todo uma vez (ou gera erro se ele n√£o existir). Esse m√©todo deve retornar um *iterador* ‚Äì um objeto com o m√©todo `next`.
// * A partir da√≠, o `for..of` trabalha apenas com o objeto retornado.
// * Quando `for..of` quiser o pr√≥ximo valor, ele chama `next()` nesse objeto.
// * O resultado de `next()` deve ter o formato `{done: Boolean, value: qualquer}`, onde `done=true` significa que o loop terminou; caso contr√°rio, `value` √© o pr√≥ximo valor.

// Aqui est√° a implementa√ß√£o completa com coment√°rios:

// ```js
// let range = {
//   from: 1,
//   to: 5
// };

// // 1. Quando o for..of come√ßa, ele chama isso:
// range[Symbol.iterator] = function() {

//   // 2. Retorna o objeto iterador:
//   return {
//     current: this.from,
//     last: this.to,

//     // 3. next() √© chamado em cada itera√ß√£o
//     next() {
//       // 4. Retorna o valor no formato {done:.., value:...}
//       if (this.current <= this.last) {
//         return { done: false, value: this.current++ };
//       } else {
//         return { done: true };
//       }
//     }
//   };
// };

// // Agora funciona!
// for (let num of range) {
//   alert(num); // 1, depois 2, 3, 4, 5
// }
// ```

// Note a principal caracter√≠stica dos iter√°veis: a separa√ß√£o de responsabilidades.

// * O objeto `range` em si n√£o tem o m√©todo `next()`.
// * Em vez disso, outro objeto ‚Äì um chamado ‚Äúiterador‚Äù ‚Äì √© criado pela chamada `range[Symbol.iterator]()`, e √© ele quem gera os valores.

// Portanto, o objeto iterador √© separado do objeto que est√° sendo iterado.

// **Unindo iter√°vel e iterador**

// Tecnicamente, podemos simplificar e fazer com que o pr√≥prio objeto `range` seja o iterador:

// ```js
// let range = {
//   from: 1,
//   to: 5,

//   [Symbol.iterator]() {
//     this.current = this.from;
//     return this;
//   },

//   next() {
//     if (this.current <= this.to) {
//       return { done: false, value: this.current++ };
//     } else {
//       return { done: true };
//     }
//   }
// };

// for (let num of range) {
//   alert(num); // 1, depois 2, 3, 4, 5
// }
// ```

// Agora `range[Symbol.iterator]()` retorna o pr√≥prio objeto `range`, que tem o m√©todo `next()` e guarda o progresso da itera√ß√£o em `this.current`. Isso √© mais curto, e √†s vezes suficiente.

// A desvantagem √© que agora n√£o podemos ter dois loops `for..of` simult√¢neos sobre o mesmo objeto, porque eles compartilhariam o estado da itera√ß√£o. Mas isso √© raro, at√© mesmo em cen√°rios ass√≠ncronos.

// **Iteradores infinitos**

// Tamb√©m √© poss√≠vel criar iteradores infinitos. Por exemplo, `range.to = Infinity` torna o intervalo infinito. Ou podemos criar um objeto iter√°vel que gera uma sequ√™ncia infinita de n√∫meros pseudoaleat√≥rios.

// N√£o h√° limites para o `next`: ele pode retornar quantos valores forem necess√°rios.

// Claro, um loop `for..of` sobre esse iterador seria infinito, mas podemos sempre interromp√™-lo com `break`.

// **String √© iter√°vel**

// Arrays e strings s√£o os iter√°veis embutidos mais usados.

// No caso das strings, `for..of` percorre seus caracteres:

// ```js
// for (let char of "teste") {
//   alert(char); // t, depois e, s, t, e
// }
// ```

// E funciona corretamente com *pares substitutos* (caracteres que ocupam dois c√≥digos UTF-16):

// ```js
// let str = 'ùí≥üòÇ';
// for (let char of str) {
//   alert(char); // ùí≥, depois üòÇ
// }
// ```

// **Chamando o iterador explicitamente**

// Para entender melhor, podemos usar um iterador diretamente.

// Vamos percorrer uma string da mesma forma que o `for..of`, mas com chamadas diretas:

// ```js
// let str = "Ol√°";

// let iterator = str[Symbol.iterator]();

// while (true) {
//   let result = iterator.next();
//   if (result.done) break;
//   alert(result.value); // exibe os caracteres um por um
// }
// ```

// Isso raramente √© necess√°rio, mas d√° mais controle sobre o processo. Por exemplo, podemos pausar e retomar a itera√ß√£o depois.

// **Iter√°veis e "array-like"**

// Dois termos parecidos mas diferentes:

// * *Iter√°veis* s√£o objetos que implementam o m√©todo `Symbol.iterator`.
// * *Array-like* (semelhantes a arrays) s√£o objetos que possuem √≠ndices num√©ricos e uma propriedade `length`.

// No dia a dia, lidamos com objetos que s√£o iter√°veis, "array-like", ou ambos.

// Por exemplo, strings s√£o ambos: iter√°veis e "array-like".

// Mas o objeto `range` mostrado acima √© iter√°vel, mas n√£o "array-like".

// E este objeto √© "array-like", mas n√£o iter√°vel:

// ```js
// let arrayLike = {
//   0: "Ol√°",
//   1: "Mundo",
//   length: 2
// };

// // Erro (n√£o tem Symbol.iterator)
// for (let item of arrayLike) {}
// ```

// Tanto iter√°veis quanto "array-likes" geralmente n√£o s√£o arrays de verdade: n√£o t√™m `push`, `pop` etc.

// Como trabalhamos com eles como se fossem arrays?

// **Array.from**

// Existe o m√©todo universal `Array.from`, que converte um iter√°vel ou "array-like" em um *array de verdade*. Assim, podemos usar os m√©todos de array normalmente.

// Exemplo com objeto "array-like":

// ```js
// let arrayLike = {
//   0: "Ol√°",
//   1: "Mundo",
//   length: 2
// };

// let arr = Array.from(arrayLike);
// alert(arr.pop()); // Mundo
// ```

// Exemplo com um iter√°vel:

// ```js
// let arr = Array.from(range);
// alert(arr); // 1,2,3,4,5
// ```

// A sintaxe completa tamb√©m permite uma fun√ß√£o de mapeamento:

// ```js
// Array.from(obj[, mapFn, thisArg])
// ```

// * `mapFn` √© aplicada a cada elemento antes de adicion√°-lo ao array.
// * `thisArg` define o `this` da fun√ß√£o `mapFn`.

// Exemplo:

// ```js
// let arr = Array.from(range, num => num * num);
// alert(arr); // 1, 4, 9, 16, 25
// ```

// Transformando string em array de caracteres (considerando pares substitutos):

// ```js
// let str = 'ùí≥üòÇ';
// let chars = Array.from(str);

// alert(chars[0]); // ùí≥
// alert(chars[1]); // üòÇ
// alert(chars.length); // 2
// ```

// √â equivalente a:

// ```js
// let chars = [];
// for (let char of str) {
//   chars.push(char);
// }
// ```

// Podemos at√© criar um `slice` que respeita pares substitutos:

// ```js
// function slice(str, start, end) {
//   return Array.from(str).slice(start, end).join('');
// }

// let str = 'ùí≥üòÇ©∑∂';

// alert(slice(str, 1, 3)); // üòÇ©∑∂
// alert(str.slice(1, 3));  // caracteres quebrados
// ```

// **Resumo**

// Objetos que podem ser usados em `for..of` s√£o chamados de *iter√°veis*.

// * Tecnicamente, iter√°veis devem implementar o m√©todo `Symbol.iterator`.

//   * O resultado de `obj[Symbol.iterator]()` √© chamado de *iterador*.
//   * Um iterador deve ter o m√©todo `next()` que retorna `{done: Boolean, value: qualquer}`.
// * O `Symbol.iterator` √© chamado automaticamente pelo `for..of`, mas tamb√©m pode ser chamado manualmente.
// * Iter√°veis embutidos como strings e arrays j√° implementam `Symbol.iterator`.
// * O iterador de strings reconhece corretamente pares substitutos.

// Objetos com √≠ndices e `length` s√£o chamados *"array-like"*. Podem ter outras propriedades e m√©todos, mas n√£o os m√©todos embutidos dos arrays.

// A maioria dos m√©todos embutidos em JavaScript aceita iter√°veis ou "array-likes", pois isso √© mais abstrato do que esperar arrays puros.

// `Array.from(obj[, mapFn, thisArg])` transforma iter√°veis ou "array-likes" em arrays reais, e permite aplicar uma fun√ß√£o a cada item durante a convers√£o.
