// ---
// ## WeakMap e WeakSet

// Como sabemos do cap√≠tulo sobre **Coleta de Lixo**, o motor JavaScript mant√©m um valor na mem√≥ria enquanto ele for "alcan√ß√°vel" e puder ser potencialmente usado.

// Por exemplo:

// ```javascript
// let john = { name: "John" };

// // o objeto pode ser acessado, john √© a refer√™ncia para ele
// // sobrescrever a refer√™ncia
// john = null;

// // o objeto ser√° removido da mem√≥ria
// ```

// Normalmente, propriedades de um objeto ou elementos de um array ou outra estrutura de dados s√£o considerados alcan√ß√°veis e mantidos na mem√≥ria enquanto essa estrutura de dados estiver na mem√≥ria.

// Por exemplo, se colocarmos um objeto em um array, enquanto o array estiver "vivo", o objeto tamb√©m estar√°, mesmo que n√£o haja outras refer√™ncias a ele.

// Assim:

// ```javascript
// let john = { name: "John" };
// let array = [ john ];

// john = null; // sobrescrever a refer√™ncia

// // o objeto previamente referenciado por john √© armazenado dentro do array
// // portanto, n√£o ser√° coletado pelo coletor de lixo
// // podemos obt√™-lo como array[0]
// ```

// Da mesma forma, se usarmos um objeto como chave em um **Map** regular, enquanto o **Map** existir, esse objeto tamb√©m existir√°. Ele ocupa mem√≥ria e pode n√£o ser coletado pelo coletor de lixo.

// Por exemplo:

// ```javascript
// let john = { name: "John" };
// let map = new Map();
// map.set(john, "...");

// john = null; // sobrescrever a refer√™ncia

// // john √© armazenado dentro do mapa,
// // podemos obt√™-lo usando map.keys()
// ```

// **WeakMap** √© fundamentalmente diferente nesse aspecto. Ele n√£o impede a coleta de lixo de objetos-chave.

// Vamos ver o que isso significa em exemplos.

// ---
// ### WeakMap

// A primeira diferen√ßa entre **Map** e **WeakMap** √© que as chaves devem ser **objetos**, n√£o valores primitivos:

// ```javascript
// let weakMap = new WeakMap();
// let obj = {};

// weakMap.set(obj, "ok"); // funciona bem (chave de objeto)

// // n√£o √© poss√≠vel usar uma string como chave
// weakMap.set("test", "Whoops"); // Erro, porque "test" n√£o √© um objeto
// ```

// Agora, se usarmos um objeto como chave nele, e n√£o houver outras refer√™ncias a esse objeto ‚Äì ele ser√° removido da mem√≥ria (e do mapa) automaticamente.

// ```javascript
// let john = { name: "John" };
// let weakMap = new WeakMap();
// weakMap.set(john, "...");

// john = null; // sobrescrever a refer√™ncia

// // john √© removido da mem√≥ria!
// ```

// Compare com o exemplo de **Map** regular acima. Agora, se `john` existir apenas como chave de um **WeakMap** ‚Äì ele ser√° automaticamente exclu√≠do do mapa (e da mem√≥ria).

// **WeakMap** n√£o suporta itera√ß√£o e os m√©todos `keys()`, `values()`, `entries()`, ent√£o n√£o h√° como obter todas as chaves ou valores dele.

// **WeakMap** tem apenas os seguintes m√©todos:

// * `weakMap.set(key, value)`
// * `weakMap.get(key)`
// * `weakMap.delete(key)`
// * `weakMap.has(key)`

// Por que tal limita√ß√£o? Isso √© por raz√µes t√©cnicas. Se um objeto perdeu todas as outras refer√™ncias (como `john` no c√≥digo acima), ele deve ser coletado pelo coletor de lixo automaticamente. Mas tecnicamente, n√£o √© exatamente especificado **quando a limpeza acontece**.

// O motor JavaScript decide isso. Ele pode optar por realizar a limpeza da mem√≥ria imediatamente ou esperar e fazer a limpeza mais tarde, quando mais exclus√µes ocorrerem. Por essa raz√£o, os m√©todos que acessam todas as chaves/valores n√£o s√£o suportados.

// Agora, onde precisamos de tal estrutura de dados?

// ---
// #### Caso de uso: dados adicionais

// A principal √°rea de aplica√ß√£o para **WeakMap** √© um **armazenamento de dados adicionais**.

// Se estamos trabalhando com um objeto que "pertence" a outro c√≥digo, talvez at√© mesmo uma biblioteca de terceiros, e gostar√≠amos de armazenar alguns dados associados a ele, que s√≥ devem existir enquanto o objeto estiver "vivo" ‚Äì ent√£o **WeakMap** √© exatamente o que √© necess√°rio.

// Colocamos os dados em um **WeakMap**, usando o objeto como chave, e quando o objeto √© coletado pelo coletor de lixo, esses dados desaparecer√£o automaticamente tamb√©m.

// ```javascript
// weakMap.set(john, "documentos secretos");
// // se john "morrer", os documentos secretos ser√£o destru√≠dos automaticamente
// ```

// Vamos ver um exemplo.

// Por exemplo, temos um c√≥digo que mant√©m uma contagem de visitas para usu√°rios. A informa√ß√£o √© armazenada em um mapa: um objeto de usu√°rio √© a chave e a contagem de visitas √© o valor. Quando um usu√°rio sai (seu objeto √© coletado pelo coletor de lixo), n√£o queremos mais armazenar sua contagem de visitas.

// Aqui est√° um exemplo de uma fun√ß√£o de contagem com **Map**:

// ```javascript
// // üìÅ visitsCount.js
// let visitsCountMap = new Map(); // map: user => visits count

// // aumentar a contagem de visitas
// function countUser(user) {
//   let count = visitsCountMap.get(user) || 0;
//   visitsCountMap.set(user, count + 1);
// }
// ```

// E aqui est√° outra parte do c√≥digo, talvez outro arquivo usando-o:

// ```javascript
// // üìÅ main.js
// let john = { name: "John" };
// countUser(john); // contar suas visitas

// // mais tarde john nos deixa
// john = null;
// ```

// Agora, o objeto `john` deveria ser coletado pelo coletor de lixo, mas permanece na mem√≥ria, pois √© uma chave em `visitsCountMap`.

// Precisamos limpar `visitsCountMap` quando removemos usu√°rios, caso contr√°rio, ele crescer√° na mem√≥ria indefinidamente. Essa limpeza pode se tornar uma tarefa tediosa em arquiteturas complexas.

// Podemos evitar isso mudando para **WeakMap** em vez disso:

// ```javascript
// // üìÅ visitsCount.js
// let visitsCountMap = new WeakMap(); // weakmap: user => visits count

// // aumentar a contagem de visitas
// function countUser(user) {
//   let count = visitsCountMap.get(user) || 0;
//   visitsCountMap.set(user, count + 1);
// }
// ```

// Agora n√£o precisamos limpar `visitsCountMap`. Depois que o objeto `john` se torna inalcan√ß√°vel, por todos os meios, exceto como uma chave de **WeakMap**, ele √© removido da mem√≥ria, juntamente com as informa√ß√µes por essa chave do **WeakMap**.

// ---
// #### Caso de uso: cache

// Outro exemplo comum √© o cache. Podemos armazenar ("cachear") resultados de uma fun√ß√£o, para que chamadas futuras no mesmo objeto possam reutiliz√°-los.

// Para conseguir isso, podemos usar **Map** (cen√°rio n√£o ideal):

// ```javascript
// // üìÅ cache.js
// let cache = new Map();

// // calcular e lembrar o resultado
// function process(obj) {
//   if (!cache.has(obj)) {
//     let result = /* c√°lculos do resultado para */ obj;

//     cache.set(obj, result);
//     return result;
//   }

//   return cache.get(obj);
// }

// // Agora usamos process() em outro arquivo:
// // üìÅ main.js
// let obj = {/* digamos que temos um objeto */};
// let result1 = process(obj); // calculado

// // ...mais tarde, de outro lugar do c√≥digo...
// let result2 = process(obj); // resultado lembrado tirado do cache

// // ...mais tarde, quando o objeto n√£o √© mais necess√°rio:
// obj = null;
// alert(cache.size); // 1 (Ops! O objeto ainda est√° no cache, ocupando mem√≥ria!)
// ```

// Para v√°rias chamadas de `process(obj)` com o mesmo objeto, ele s√≥ calcula o resultado na primeira vez e depois apenas o pega do `cache`. A desvantagem √© que precisamos limpar o `cache` quando o objeto n√£o √© mais necess√°rio.

// Se substituirmos **Map** por **WeakMap**, ent√£o esse problema desaparece. O resultado em cache ser√° removido da mem√≥ria automaticamente depois que o objeto for coletado pelo coletor de lixo.

// ```javascript
// // üìÅ cache.js
// let cache = new WeakMap();

// // calcular e lembrar o resultado
// function process(obj) {
//   if (!cache.has(obj)) {
//     let result = /* calcular o resultado para */ obj;

//     cache.set(obj, result);
//     return result;
//   }

//   return cache.get(obj);
// }

// // üìÅ main.js
// let obj = {/* algum objeto */};
// let result1 = process(obj);
// let result2 = process(obj);

// // ...mais tarde, quando o objeto n√£o √© mais necess√°rio:
// obj = null;

// // N√£o √© poss√≠vel obter cache.size, pois √© um WeakMap,
// // mas √© 0 ou em breve ser√° 0
// // Quando obj for coletado pelo coletor de lixo, os dados em cache tamb√©m ser√£o removidos
// ```

// ---
// ### WeakSet

// **WeakSet** se comporta de forma semelhante:

// * √â an√°logo ao **Set**, mas s√≥ podemos adicionar **objetos** a um **WeakSet** (n√£o primitivos).
// * Um objeto existe no conjunto enquanto for alcan√ß√°vel de algum outro lugar.
// * Como o **Set**, ele suporta `add`, `has` e `delete`, mas n√£o `size`, `keys()` e n√£o h√° itera√ß√µes.

// Sendo "fraco", ele tamb√©m serve como armazenamento adicional. Mas n√£o para dados arbitr√°rios, e sim para fatos de "sim/n√£o". Uma associa√ß√£o em um **WeakSet** pode significar algo sobre o objeto.

// Por exemplo, podemos adicionar usu√°rios ao **WeakSet** para acompanhar aqueles que visitaram nosso site:

// ```javascript
// let visitedSet = new WeakSet();

// let john = { name: "John" };
// let pete = { name: "Pete" };
// let mary = { name: "Mary" };

// visitedSet.add(john); // John nos visitou
// visitedSet.add(pete); // Ent√£o Pete
// visitedSet.add(john); // John novamente

// // visitedSet tem 2 usu√°rios agora
// // verificar se John visitou?
// alert(visitedSet.has(john)); // true

// // verificar se Mary visitou?
// alert(visitedSet.has(mary)); // false

// john = null;
// // visitedSet ser√° limpo automaticamente
// ```

// A limita√ß√£o mais not√°vel de **WeakMap** e **WeakSet** √© a aus√™ncia de itera√ß√µes e a incapacidade de obter todo o conte√∫do atual. Isso pode parecer inconveniente, mas n√£o impede que **WeakMap**/**WeakSet** fa√ßam seu trabalho principal ‚Äì ser um armazenamento "adicional" de dados para objetos que s√£o armazenados/gerenciados em outro lugar.

// ---
// ### Resumo

// **WeakMap** ‚Äì √© uma cole√ß√£o semelhante a **Map** que permite apenas objetos como chaves e os remove juntamente com o valor associado assim que se tornam inacess√≠veis por outros meios.

// **WeakSet** ‚Äì √© uma cole√ß√£o semelhante a **Set** que armazena apenas objetos e os remove assim que se tornam inacess√≠veis por outros meios.

// Suas principais vantagens s√£o que eles possuem uma **refer√™ncia fraca** a objetos, de modo que podem ser facilmente removidos pelo coletor de lixo.

// Isso tem o custo de n√£o ter suporte para `clear`, `size`, `keys`, `values`...

// **WeakMap** e **WeakSet** s√£o usados como estruturas de dados "secund√°rias" em adi√ß√£o ao armazenamento de objetos "prim√°rio". Uma vez que o objeto √© removido do armazenamento prim√°rio, se ele for encontrado apenas como a chave de um **WeakMap** ou em um **WeakSet**, ele ser√° limpo automaticamente.