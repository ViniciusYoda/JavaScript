// Aqui est√° a **tradu√ß√£o completa e adaptada para o portugu√™s** da se√ß√£o sobre **tamanho de elementos e rolagem** com termos t√©cnicos bem explicados:

// ---

// ## **Tamanho do Elemento e Rolagem (Element size and scrolling)**

// O JavaScript oferece v√°rias propriedades para ler informa√ß√µes sobre a **largura, altura** e outras caracter√≠sticas geom√©tricas dos elementos.

// Essas propriedades s√£o muito √∫teis quando precisamos **mover** ou **posicionar** elementos dinamicamente.

// ---

// ## **Elemento de exemplo**

// Vamos usar o seguinte elemento de exemplo para demonstrar essas propriedades:

// ```html
// <div id="exemplo">
//   ...Texto...
// </div>
// <style>
//   #exemplo {
//     width: 300px;
//     height: 200px;
//     border: 25px solid #E8C48F;
//     padding: 20px;
//     overflow: auto;
//   }
// </style>
// ```

// Este elemento possui:

// * **Borda**
// * **Preenchimento (padding)**
// * **Barra de rolagem (scroll)**

// > ‚ùå **N√£o possui margens**, pois elas n√£o fazem parte do "elemento em si" (s√£o externas).

// ---

// ## **Aten√ß√£o √† barra de rolagem**

// Em navegadores que **reservam espa√ßo para a barra de rolagem**, ela **consome parte da largura do conte√∫do**.

// Por exemplo, sem a barra de rolagem, o conte√∫do teria 300px. Com uma barra de 16px, sobram apenas **284px** vis√≠veis.

// Por isso, muitos exemplos aqui assumem que **existe uma barra de rolagem**. Sem ela, os c√°lculos seriam mais simples.

// ---

// ## **O conte√∫do pode ocupar o padding-bottom**

// O preenchimento (padding) normalmente √© visualizado como "vazio", mas se houver muito texto e ele ultrapassar a altura vis√≠vel, o navegador exibir√° esse texto dentro da √°rea de padding-bottom. Isso √© esperado e normal.

// ---

// ## **Propriedades geom√©tricas**

// Essas propriedades retornam **n√∫meros em pixels**.

// Vamos come√ßar pelas propriedades mais externas.

// ---

// ### üü´ `offsetParent`, `offsetLeft`, `offsetTop`

// * **`offsetParent`**: √© o ancestral mais pr√≥ximo que serve como **refer√™ncia de posi√ß√£o**. Pode ser:

//   * Um elemento com `position: relative`, `absolute`, `fixed` ou `sticky`
//   * `<td>`, `<th>` ou `<table>`
//   * `<body>`

// * **`offsetLeft` / `offsetTop`**: coordenadas do canto superior esquerdo do elemento **relativas ao seu `offsetParent`**.

// #### Exemplo:

// ```html
// <main style="position: relative" id="main">
//   <article>
//     <div id="exemplo" style="position: absolute; left: 180px; top: 180px">...</div>
//   </article>
// </main>

// <script>
//   alert(exemplo.offsetParent.id); // main
//   alert(exemplo.offsetLeft); // 180 (n√∫mero, n√£o "180px")
//   alert(exemplo.offsetTop);  // 180
// </script>
// ```

// üß† `offsetParent` ser√° `null` se:

// * O elemento (ou ancestral) est√° com `display: none`
// * O elemento √© o `<body>` ou `<html>`
// * O elemento usa `position: fixed`

// ---

// ### üìè `offsetWidth`, `offsetHeight`

// Essas s√£o as **dimens√µes totais** do elemento:

// * Incluem: conte√∫do + padding + bordas
// * **N√£o incluem margens**

// No exemplo:

// * `offsetWidth = 390` ‚Üí 300 (largura CSS) + 2√ó20 (padding) + 2√ó25 (borda)
// * `offsetHeight = 290`

// üõë Se o elemento estiver oculto ou n√£o no DOM, essas propriedades retornam **0**.

// #### Checar se est√° oculto:

// ```js
// function estaOculto(elem) {
//   return !elem.offsetWidth && !elem.offsetHeight;
// }
// ```

// ---

// ### üéØ `clientTop`, `clientLeft`

// Representam a dist√¢ncia da borda externa at√© a √°rea de conte√∫do (interna). Normalmente, s√£o iguais √† **largura da borda**.

// No exemplo:

// * `clientTop = 25` ‚Üí borda superior
// * `clientLeft = 25` ‚Üí borda esquerda

// üìù Em sistemas com layout da direita para a esquerda (ex: √°rabe, hebraico), o `clientLeft` pode **incluir a largura da barra de rolagem**.

// ---

// ### üß© `clientWidth`, `clientHeight`

// Representam a **√°rea vis√≠vel do conte√∫do**, **incluindo o padding**, mas **sem incluir a barra de rolagem**.

// No exemplo:

// * `clientHeight = 240` ‚Üí 200 (altura CSS) + 2√ó20 (padding)
// * `clientWidth = 284 + 2√ó20 = 324` ‚Üí 300 (largura CSS) - 16 (scroll) + 2√ó20 (padding)

// Se n√£o houver padding, `clientWidth/Height` √© igual √† √°rea vis√≠vel do conte√∫do.

// ---

// ### üìú `scrollWidth`, `scrollHeight`

// Incluem **todo o conte√∫do**, inclusive o que est√° oculto devido √† rolagem.

// * `scrollHeight = 723` ‚Üí altura total interna, mesmo que parte esteja invis√≠vel
// * `scrollWidth = 324` ‚Üí igual ao `clientWidth` se n√£o houver scroll horizontal

// ### Expandir um elemento para sua altura total:

// ```js
// element.style.height = `${element.scrollHeight}px`;
// ```

// ---

// ### üîΩ `scrollTop`, `scrollLeft`

// Indicam **quanto o conte√∫do j√° foi rolado** vertical ou horizontalmente.

// * `scrollTop` ‚Üí quanto foi rolado **para cima**
// * `scrollLeft` ‚Üí quanto foi rolado **para a esquerda**

// ‚úÖ Essas propriedades **podem ser modificadas** para **for√ßar a rolagem**:

// ```js
// elem.scrollTop += 10; // rola 10px para baixo
// elem.scrollTop = 0;   // rola para o topo
// elem.scrollTop = 1e9; // rola at√© o fim
// ```

// ---

// ## ‚ùó N√£o confie na largura/altura do CSS

// Podemos usar `getComputedStyle(elem).width` para obter a largura CSS, mas **isso tem desvantagens**:

// ### Por que n√£o usar?

// 1. **Depende de `box-sizing`**, que altera o significado de `width` e `height`. Pode causar inconsist√™ncias.

// 2. CSS pode ter `width: auto`, o que √© inv√°lido para c√°lculos em JavaScript:

// ```html
// <span id="elem">Ol√°!</span>
// <script>
//   alert(getComputedStyle(elem).width); // auto
// </script>
// ```

// 3. A **barra de rolagem** pode causar diverg√™ncias entre navegadores:

// * Firefox retorna `width: 300px` (valor CSS)
// * Chrome/Edge retornam `284px` (√°rea real, sem scrollbar)

// Por isso, √© mais **seguro usar** propriedades como `clientWidth`, `offsetWidth`, etc.

// ---

// ## ‚úÖ Resumo final

// | Propriedade                   | O que retorna                                                                     |
// | ----------------------------- | --------------------------------------------------------------------------------- |
// | `offsetParent`                | Ancestral posicionado mais pr√≥ximo                                                |
// | `offsetLeft`, `offsetTop`     | Posi√ß√£o em rela√ß√£o ao `offsetParent`                                              |
// | `offsetWidth`, `offsetHeight` | Tamanho total incluindo bordas                                                    |
// | `clientLeft`, `clientTop`     | Largura da borda esquerda/superior (ou dist√¢ncia da borda externa at√© o conte√∫do) |
// | `clientWidth`, `clientHeight` | √Årea vis√≠vel do conte√∫do (conte√∫do + padding - scrollbar)                         |
// | `scrollWidth`, `scrollHeight` | Tamanho total do conte√∫do (inclusive a parte oculta)                              |
// | `scrollLeft`, `scrollTop`     | Quanto j√° foi rolado (horizontal/vertical)                                        |

// üîí Todas essas propriedades s√£o **somente leitura**, exceto `scrollLeft` e `scrollTop`, que podem ser modificadas para rolar o conte√∫do.

// ---

// Se quiser, posso formatar essa tradu√ß√£o em PDF, HTML, Markdown ou outro formato. Deseja?
