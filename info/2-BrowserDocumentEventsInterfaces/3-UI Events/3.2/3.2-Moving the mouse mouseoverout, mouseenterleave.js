// Claro! Abaixo est√° **todo o conte√∫do traduzido e adaptado para o portugu√™s**, com explica√ß√µes claras sobre os eventos de movimento do mouse: `mouseover`, `mouseout`, `mouseenter` e `mouseleave`.

// ---

// ## üéØ Movimento do mouse: `mouseover/out`, `mouseenter/leave`

// Vamos nos aprofundar nos eventos que ocorrem quando o ponteiro do mouse se move entre elementos.

// ---

// ## üß≠ Eventos `mouseover` / `mouseout` e a propriedade `relatedTarget`

// * `mouseover`: ocorre quando o mouse entra em um elemento.
// * `mouseout`: ocorre quando o mouse sai de um elemento.

// Esses eventos t√™m uma propriedade especial chamada `relatedTarget`, que **complementa** `target`.

// ### Entenda:

// * No `mouseover`:

//   * `event.target` ‚Üí √© o **elemento onde o mouse entrou**.
//   * `event.relatedTarget` ‚Üí √© o **elemento de onde o mouse saiu**.

// * No `mouseout`:

//   * `event.target` ‚Üí √© o **elemento que o mouse saiu**.
//   * `event.relatedTarget` ‚Üí √© o **novo elemento onde o mouse entrou**.

// ### Exemplo:

// Se o mouse sai de um bot√£o e entra num par√°grafo:

// * `mouseout` do bot√£o:

//   * `target` = bot√£o
//   * `relatedTarget` = par√°grafo

// ---

// ## ‚ö†Ô∏è `relatedTarget` pode ser `null`

// √Äs vezes, `relatedTarget` ser√° `null`. Isso significa que o mouse:

// * Entrou na p√°gina vindo de **fora da janela** do navegador.
// * Ou saiu da p√°gina completamente.

// > Importante verificar se `relatedTarget` √© nulo antes de acessar algo como `relatedTarget.tagName`.

// ---

// ## ‚è© Pulando elementos ao mover o mouse

// O evento `mousemove` √© disparado **somente em alguns momentos**, n√£o a cada pixel movido.

// Se o usu√°rio mover o mouse muito r√°pido, o navegador pode **pular elementos intermedi√°rios**:

// Por exemplo, se o ponteiro vai direto do elemento `#de` para `#para`, o `mouseout` pode ser disparado em `#de` e logo depois o `mouseover` em `#para`, **sem eventos nos elementos do meio**.

// ‚úÖ Isso melhora o desempenho.
// ‚ùó Mas significa que nem todos os elementos ao longo do caminho ser√£o "visitados".

// ---

// ## ‚úÖ Garantia: se houve `mouseover`, haver√° `mouseout`

// Mesmo em movimentos r√°pidos, se o ponteiro entrou oficialmente em um elemento (gerando `mouseover`), **haver√° `mouseout`** quando ele sair.

// ---

// ## üß¨ `mouseout` ao entrar em um filho

// Quando o mouse sai de um elemento e entra em **um filho**, o evento `mouseout` ainda ser√° disparado no pai.

// ```html
// <div id="pai">
//   <div id="filho">...</div>
// </div>
// ```

// Ao mover o mouse do `#pai` para `#filho`, o navegador interpreta como:

// 1. Sair do `#pai` ‚Üí `mouseout` no pai.
// 2. Entrar no `#filho` ‚Üí `mouseover` no filho (que **bolha** para o pai).

// ### Isso acontece porque:

// O navegador considera que o ponteiro **s√≥ pode estar sobre um √∫nico elemento por vez**, o mais profundo (mais interno) visualmente.

// ---

// ## üß™ Solu√ß√£o para detectar *realmente* sair do elemento

// Se voc√™ quer evitar a√ß√µes como anima√ß√µes quando o ponteiro **apenas entra em um filho**, voc√™ pode verificar o `relatedTarget`.

// ```js
// elemento.onmouseout = function(event) {
//   if (event.relatedTarget && elemento.contains(event.relatedTarget)) {
//     // o ponteiro ainda est√° dentro do elemento (em um filho)
//     return; // ignore o evento
//   }

//   // agora sim, o mouse saiu de verdade
// };
// ```

// ---

// ## üö™ Eventos `mouseenter` e `mouseleave`

// S√£o vers√µes **mais simples** e espec√≠ficas de `mouseover` / `mouseout`.

// Diferen√ßas principais:

// |                     | `mouseover`/`mouseout`                   | `mouseenter`/`mouseleave`          |
// | ------------------- | ---------------------------------------- | ---------------------------------- |
// | Considera filhos?   | ‚úÖ Sim (dispara ao entrar/sair de filhos) | ‚ùå N√£o (ignora transi√ß√µes internas) |
// | Bolha?              | ‚úÖ Sim                                    | ‚ùå N√£o                              |
// | Usa `relatedTarget` | ‚úÖ Sim                                    | ‚úÖ Sim                              |

// ### Exemplo:

// ```js
// elemento.onmouseenter = () => console.log('Entrou no elemento');
// elemento.onmouseleave = () => console.log('Saiu do elemento');
// ```

// Mesmo que o mouse v√° de um filho para outro, **n√£o dispara de novo**.

// ---

// ## üß∞ Delega√ß√£o de eventos com `mouseover/out`

// Os eventos `mouseenter/leave` **n√£o propagam (n√£o bolham)**, ent√£o **n√£o servem para delega√ß√£o**.

// Exemplo: queremos detectar entrada/sa√≠da em v√°rias `<td>` de uma `<table>`, sem colocar um handler em cada c√©lula.

// Solu√ß√£o: usar `mouseover`/`mouseout` e filtrar manualmente.

// ---

// ## üëá Exemplo com delega√ß√£o em `<table>`

// ```js
// let elementoAtual = null;

// tabela.onmouseover = function(event) {
//   if (elementoAtual) return;

//   let alvo = event.target.closest('td');
//   if (!alvo || !tabela.contains(alvo)) return;

//   elementoAtual = alvo;
//   aoEntrar(elementoAtual);
// };

// tabela.onmouseout = function(event) {
//   if (!elementoAtual) return;

//   let destino = event.relatedTarget;
//   while (destino) {
//     if (destino === elementoAtual) return;
//     destino = destino.parentNode;
//   }

//   aoSair(elementoAtual);
//   elementoAtual = null;
// };

// function aoEntrar(elem) {
//   elem.style.background = 'pink';
// }

// function aoSair(elem) {
//   elem.style.background = '';
// }
// ```

// > Isso garante que a c√©lula `<td>` s√≥ seja destacada ao entrar/sair **como um todo**, e **n√£o** ao ir de um filho para outro.

// ---

// ## ‚úÖ Resumo

// * Eventos:

//   * `mouseover` / `mouseout` ‚Üí **disparam ao mover entre qualquer elemento**, inclusive filhos. T√™m `relatedTarget` e propagam.
//   * `mouseenter` / `mouseleave` ‚Üí **disparam s√≥ ao entrar/sair diretamente** do elemento. N√£o propagam.

// * Use `relatedTarget` para verificar **de onde veio ou para onde vai o mouse**.

// * Para delega√ß√£o (ex: uma tabela com muitas `<td>`), use `mouseover`/`mouseout` + filtros manuais.

// * Movimentos r√°pidos do mouse **podem pular elementos**.

// ---

// Se quiser, posso criar um exemplo completo com `<table>` e destaque de c√©lulas para voc√™ testar. Deseja isso?
