// Aqui est√° **todo o conte√∫do traduzido e adaptado para o portugu√™s** sobre **arrastar e soltar (Drag‚Äôn‚ÄôDrop)** com eventos do mouse ‚Äî explica√ß√£o clara, did√°tica e pronta para aplicar:

// ---

// ## üñ±Ô∏è Arrastar e Soltar (Drag‚Äôn‚ÄôDrop) com eventos do mouse

// Drag‚Äôn‚ÄôDrop √© uma excelente solu√ß√£o de interface. Arrastar algo e soltar em outro lugar √© uma forma intuitiva e pr√°tica de realizar a√ß√µes como:

// * Mover documentos,
// * Adicionar produtos ao carrinho,
// * Reorganizar itens na tela.

// O HTML moderno tem suporte nativo para *drag and drop*, com eventos como `dragstart`, `dragend`, entre outros.

// ---

// ### ‚ùå Limita√ß√µes do Drag and Drop nativo:

// * N√£o √© poss√≠vel bloquear a √°rea onde pode ser arrastado.
// * N√£o d√° para restringir o movimento apenas na horizontal ou vertical.
// * Suporte fraco em dispositivos m√≥veis.
// * Dificuldade em customiza√ß√µes mais complexas.

// ---

// ## ‚úÖ Solu√ß√£o alternativa: usar eventos do mouse

// A forma manual (e mais flex√≠vel) de implementar Drag‚Äôn‚ÄôDrop com eventos de mouse √©:

// ### üß† Algoritmo b√°sico:

// 1. **`mousedown`** ‚Üí Preparar o elemento para ser arrastado (posicionamento, apar√™ncia).
// 2. **`mousemove`** ‚Üí Mover o elemento com `position: absolute` alterando `left` e `top`.
// 3. **`mouseup`** ‚Üí Finalizar o arrasto, limpar eventos, aplicar a√ß√µes.

// ---

// ## üéì Exemplo: arrastando uma bola

// ```js
// ball.onmousedown = function(event) {
//   ball.style.position = 'absolute';
//   ball.style.zIndex = 1000;
//   document.body.append(ball);

//   function moveAt(pageX, pageY) {
//     ball.style.left = pageX - ball.offsetWidth / 2 + 'px';
//     ball.style.top = pageY - ball.offsetHeight / 2 + 'px';
//   }

//   moveAt(event.pageX, event.pageY);

//   function onMouseMove(event) {
//     moveAt(event.pageX, event.pageY);
//   }

//   document.addEventListener('mousemove', onMouseMove);

//   ball.onmouseup = function() {
//     document.removeEventListener('mousemove', onMouseMove);
//     ball.onmouseup = null;
//   };
// };
// ```

// ---

// ### ‚ö†Ô∏è Problema: o navegador tenta "clonar" o elemento arrastado

// O navegador pode tentar aplicar seu pr√≥prio comportamento nativo de drag‚Äôn‚Äôdrop (especialmente em imagens), fazendo parecer que voc√™ est√° arrastando uma c√≥pia.

// Para desativar isso:

// ```js
// ball.ondragstart = function() {
//   return false;
// };
// ```

// ---

// ## üñºÔ∏è Posicionamento correto do elemento

// No exemplo anterior, a bola sempre ficava centralizada sob o ponteiro.

// Mas se voc√™ clicar nas bordas da bola, ela "salta" para o centro do ponteiro. N√£o √© uma boa experi√™ncia.

// ### ‚úÖ Solu√ß√£o: manter o deslocamento inicial

// Armazene a dist√¢ncia entre o ponteiro e o canto superior esquerdo da bola no momento do clique:

// ```js
// let shiftX = event.clientX - ball.getBoundingClientRect().left;
// let shiftY = event.clientY - ball.getBoundingClientRect().top;
// ```

// Use esse deslocamento ao mover a bola:

// ```js
// ball.style.left = event.pageX - shiftX + 'px';
// ball.style.top = event.pageY - shiftY + 'px';
// ```

// ---

// ### üîÅ C√≥digo completo com posicionamento refinado:

// ```js
// ball.onmousedown = function(event) {
//   let shiftX = event.clientX - ball.getBoundingClientRect().left;
//   let shiftY = event.clientY - ball.getBoundingClientRect().top;

//   ball.style.position = 'absolute';
//   ball.style.zIndex = 1000;
//   document.body.append(ball);

//   moveAt(event.pageX, event.pageY);

//   function moveAt(pageX, pageY) {
//     ball.style.left = pageX - shiftX + 'px';
//     ball.style.top = pageY - shiftY + 'px';
//   }

//   function onMouseMove(event) {
//     moveAt(event.pageX, event.pageY);
//   }

//   document.addEventListener('mousemove', onMouseMove);

//   ball.onmouseup = function() {
//     document.removeEventListener('mousemove', onMouseMove);
//     ball.onmouseup = null;
//   };
// };

// ball.ondragstart = () => false;
// ```

// ---

// ## üéØ Alvos de soltar (droppables)

// Na pr√°tica, geralmente arrastamos um elemento e o soltamos **sobre outro** (ex: item ‚Üí carrinho, arquivo ‚Üí pasta).

// ### O que precisamos saber:

// 1. **Onde** o elemento foi solto ‚Üí para executar uma a√ß√£o.
// 2. **Sobre qual alvo** estamos passando durante o arrasto ‚Üí para destacar visualmente.

// ---

// ## ‚ùå Tentativa que n√£o funciona

// Voc√™ pode pensar: *"vou usar `mouseover` nos elementos que podem receber o item arrastado..."*

// Mas **isso falha**, porque o elemento sendo arrastado **fica por cima** dos demais. Logo, os eventos de mouse **n√£o chegam nos elementos abaixo**.

// ---

// ### ‚úÖ Solu√ß√£o: usar `document.elementFromPoint(x, y)`

// Essa fun√ß√£o retorna o **elemento mais interno** no ponto `x, y` (coordenadas relativas √† janela).

// Exemplo:

// ```js
// ball.hidden = true;
// let elemAbaixo = document.elementFromPoint(event.clientX, event.clientY);
// ball.hidden = false;
// ```

// ---

// ### üß† Por que esconder o elemento?

// Se n√£o escondermos, `elementFromPoint` sempre retorna a pr√≥pria bola ‚Äî porque ela est√° no topo.

// ---

// ### üëá C√≥digo completo de `onMouseMove` com detec√ß√£o de droppables:

// ```js
// let currentDroppable = null;

// function onMouseMove(event) {
//   moveAt(event.pageX, event.pageY);

//   ball.hidden = true;
//   let elemBelow = document.elementFromPoint(event.clientX, event.clientY);
//   ball.hidden = false;

//   if (!elemBelow) return;

//   let droppableBelow = elemBelow.closest('.droppable');

//   if (currentDroppable !== droppableBelow) {
//     if (currentDroppable) {
//       leaveDroppable(currentDroppable);
//     }
//     currentDroppable = droppableBelow;
//     if (currentDroppable) {
//       enterDroppable(currentDroppable);
//     }
//   }
// }
// ```

// Fun√ß√µes de entrada e sa√≠da do alvo:

// ```js
// function enterDroppable(elem) {
//   elem.style.background = 'lightgreen';
// }

// function leaveDroppable(elem) {
//   elem.style.background = '';
// }
// ```

// ---

// ## üßæ Resumo

// ### üß± Fundamentos do arrastar e soltar com mouse:

// * `mousedown` no item ‚Üí come√ßa o arrasto.
// * `mousemove` no `document` ‚Üí movimenta o item.
// * `mouseup` ‚Üí finaliza o arrasto.
// * `ondragstart` ‚Üí retornando `false` desativa o comportamento nativo do navegador.

// ### üéØ Dicas:

// * Use `shiftX` e `shiftY` para manter o elemento na mesma posi√ß√£o sob o ponteiro.
// * Use `elementFromPoint` para detectar o que est√° abaixo do item arrastado.
// * Use classes como `.droppable` para identificar alvos v√°lidos de soltar.
// * Destaque visualmente os elementos com `enterDroppable` / `leaveDroppable`.

// ---

// Se quiser, posso montar um exemplo HTML + CSS + JS com esse sistema funcionando (drag + droppable com destaque). Deseja isso?
