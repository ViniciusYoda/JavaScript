// Aqui est√° a **vers√£o em portugu√™s** do conte√∫do completo sobre **propriedades e m√©todos de formul√°rios**:

// ---

// ## üìù Propriedades e M√©todos de Formul√°rios

// Formul√°rios e elementos de controle, como `<input>`, possuem **v√°rias propriedades e eventos especiais**.

// Trabalhar com formul√°rios se torna **muito mais f√°cil** ao conhecer essas funcionalidades.

// ---

// ## üîÑ Navega√ß√£o: `form` e `elements`

// Todos os formul√°rios da p√°gina est√£o dispon√≠veis em `document.forms`.

// Essa √© uma **cole√ß√£o nomeada** (named collection): podemos acessar os formul√°rios **pelo nome** ou pela **posi√ß√£o (√≠ndice)**.

// ```js
// document.forms.meuFormulario; // formul√°rio com name="meuFormulario"
// document.forms[0]; // primeiro formul√°rio do documento
// ```

// Dentro de um formul√°rio, qualquer campo pode ser acessado com `form.elements`.

// ### Exemplo:

// ```html
// <form name="meuFormulario">
//   <input name="um" value="1">
//   <input name="dois" value="2">
// </form>

// <script>
//   let form = document.forms.meuFormulario;
//   let elem = form.elements.um;

//   alert(elem.value); // 1
// </script>
// ```

// ### V√°rios campos com o mesmo nome

// Se houver **m√∫ltiplos elementos com o mesmo `name`**, como bot√µes de r√°dio ou checkboxes, ent√£o `form.elements[name]` ser√° uma **cole√ß√£o**.

// ```html
// <form>
//   <input type="radio" name="idade" value="10">
//   <input type="radio" name="idade" value="20">
// </form>

// <script>
//   let form = document.forms[0];
//   let idade = form.elements.idade;

//   alert(idade[0]); // [object HTMLInputElement]
// </script>
// ```

// A estrutura do HTML n√£o interfere: **todos os controles de formul√°rio ficam acess√≠veis em `form.elements`**, mesmo que estejam aninhados.

// ---

// ## üß© Fieldsets como "subformul√°rios"

// Um formul√°rio pode conter `<fieldset>`, que **tamb√©m possui a propriedade `elements`** com os controles internos.

// ```html
// <form id="form">
//   <fieldset name="usuario">
//     <legend>Informa√ß√µes</legend>
//     <input name="login" type="text">
//   </fieldset>
// </form>

// <script>
//   alert(form.elements.login); // <input name="login">
//   let fieldset = form.elements.usuario;
//   alert(fieldset); // HTMLFieldSetElement
//   alert(fieldset.elements.login == form.elements.login); // true
// </script>
// ```

// ---

// ## ‚ú® Forma abreviada: `form.nome`

// Tamb√©m √© poss√≠vel acessar elementos usando `form[nome]` diretamente:

// ```html
// <form id="form">
//   <input name="login">
// </form>

// <script>
//   alert(form.elements.login == form.login); // true

//   form.login.name = "usuario";

//   alert(form.elements.login);     // undefined
//   alert(form.elements.usuario);   // input
//   alert(form.usuario == form.login); // true
// </script>
// ```

// > ‚ö†Ô∏è Mesmo ap√≥s mudar o `name`, o campo ainda √© acess√≠vel pelo nome antigo. Isso raramente causa problemas, j√° que raramente se altera o `name` dinamicamente.

// ---

// ## üîÅ Refer√™ncia reversa: `element.form`

// Todo campo de formul√°rio possui uma propriedade `.form` que aponta para o formul√°rio ao qual pertence.

// ```html
// <form id="form">
//   <input type="text" name="login">
// </form>

// <script>
//   let login = form.login;
//   alert(login.form); // HTMLFormElement
// </script>
// ```

// ---

// ## üß© Elementos de Formul√°rio

// ### `<input>` e `<textarea>`

// * O valor de texto √© acessado com `.value`
// * Para checkboxes e radios, usamos `.checked` (booleano)

// ```js
// input.value = "Novo valor";
// textarea.value = "Texto atualizado";
// input.checked = true;
// ```

// > ‚ö†Ô∏è **Nunca use `textarea.innerHTML`** para obter o valor. Use sempre `.value`.

// ---

// ### `<select>` e `<option>`

// Um `<select>` possui:

// * `select.options` ‚Üí cole√ß√£o de `<option>`
// * `select.value` ‚Üí valor do `<option>` selecionado
// * `select.selectedIndex` ‚Üí √≠ndice do `<option>` selecionado

// #### Tr√™s formas de selecionar um valor:

// ```js
// select.options[2].selected = true;
// select.selectedIndex = 2;
// select.value = "banana";
// ```

// > Op√ß√µes come√ßam do √≠ndice 0.

// #### M√∫ltiplas op√ß√µes selecionadas (`multiple`):

// ```html
// <select id="select" multiple>
//   <option value="blues" selected>Blues</option>
//   <option value="rock" selected>Rock</option>
//   <option value="classico">Cl√°ssico</option>
// </select>

// <script>
//   let selecionados = Array.from(select.options)
//     .filter(opcao => opcao.selected)
//     .map(opcao => opcao.value);

//   alert(selecionados); // blues,rock
// </script>
// ```

// ---

// ## üÜï Criando `<option>` com `new Option`

// A forma r√°pida de criar uma `<option>`:

// ```js
// let opcao = new Option("Texto", "valor", true, true);
// // <option value="valor" selected>Texto</option>
// ```

// Par√¢metros:

// * `text`: texto vis√≠vel
// * `value`: valor enviado
// * `defaultSelected`: define atributo HTML `selected`
// * `selected`: define se a op√ß√£o est√° selecionada

// Propriedades de `<option>`:

// * `option.selected` ‚Üí est√° selecionada?
// * `option.index` ‚Üí √≠ndice da op√ß√£o
// * `option.text` ‚Üí texto exibido

// ---

// ## üìö Refer√™ncia

// * Especifica√ß√£o: [https://html.spec.whatwg.org/multipage/forms.html#the-select-element](https://html.spec.whatwg.org/multipage/forms.html#the-select-element)

// ---

// ## ‚úÖ Resumo

// ### Navega√ß√£o:

// * `document.forms[name/√≠ndice]` ‚Üí acessa formul√°rios
// * `form.elements[name/√≠ndice]` ‚Üí acessa campos do formul√°rio
// * `form[nome]` ‚Üí forma abreviada
// * `element.form` ‚Üí acessa o formul√°rio a partir do campo

// ### Valores:

// * `.value` ‚Üí para inputs, textarea, select
// * `.checked` ‚Üí para checkbox/radio
// * `.selectedIndex` e `.options` ‚Üí para `<select>`

// Esses s√£o os fundamentos para manipular formul√°rios.
// No pr√≥ximo cap√≠tulo, aprenderemos sobre os eventos `focus` e `blur`, que s√£o essenciais ao lidar com campos de entrada.

// Se quiser, posso montar um mini formul√°rio com tudo isso funcionando em um exemplo pr√°tico. Deseja?
