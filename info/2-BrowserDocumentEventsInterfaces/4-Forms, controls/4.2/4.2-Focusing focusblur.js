// Aqui est√° a **vers√£o em portugu√™s** do conte√∫do completo sobre **foco: eventos `focus` e `blur`**:

// ---

// ## üîç Foco: `focus` / `blur`

// Um elemento recebe **foco** quando o usu√°rio clica nele ou navega at√© ele usando a tecla **Tab**.
// Tamb√©m √© poss√≠vel definir o foco automaticamente com o atributo HTML `autofocus` ou via JavaScript.

// Receber foco geralmente significa: "**pronto para receber dados**", o que pode ser o momento ideal para rodar alguma l√≥gica de inicializa√ß√£o.

// Perder o foco (evento `blur`) geralmente indica: "**entrada finalizada**", e podemos validar ou salvar os dados, por exemplo.

// H√° particularidades importantes ao trabalhar com foco, que veremos a seguir.

// ---

// ## üéØ Eventos `focus` e `blur`

// * `focus` ocorre **ao focar** o elemento.
// * `blur` ocorre **ao perder o foco**.

// ### Exemplo de valida√ß√£o de email:

// ```html
// <style>
//   .invalid { border-color: red; }
//   #error { color: red }
// </style>

// Seu email: <input type="email" id="input">
// <div id="error"></div>

// <script>
// input.onblur = function() {
//   if (!input.value.includes('@')) {
//     input.classList.add('invalid');
//     error.innerHTML = 'Por favor, insira um email v√°lido.';
//   }
// };

// input.onfocus = function() {
//   if (this.classList.contains('invalid')) {
//     this.classList.remove('invalid');
//     error.innerHTML = '';
//   }
// };
// </script>
// ```

// > ‚ö†Ô∏è HTML moderno j√° permite valida√ß√µes com `required`, `pattern`, etc.
// > Use JavaScript quando precisar de **maior flexibilidade**.

// ---

// ## üìå M√©todos `focus()` e `blur()`

// * `elem.focus()` ‚Üí aplica o foco ao elemento.
// * `elem.blur()` ‚Üí remove o foco do elemento.

// ### Exemplo: impedir que o usu√°rio saia do campo sem digitar um email v√°lido:

// ```html
// <style>
//   .error { background: red; }
// </style>

// Seu email: <input type="email" id="input">
// <input type="text" placeholder="Tente focar aqui sem email v√°lido">

// <script>
// input.onblur = function() {
//   if (!this.value.includes('@')) {
//     this.classList.add("error");
//     input.focus(); // for√ßa o foco de volta
//   } else {
//     this.classList.remove("error");
//   }
// };
// </script>
// ```

// > ‚ùó N√£o √© poss√≠vel impedir `blur` com `event.preventDefault()`, pois ele ocorre **depois** da perda de foco.

// Use com cuidado. Evitar a navega√ß√£o do usu√°rio pode ser irritante. Prefira exibir mensagens e **permitir que o usu√°rio continue preenchendo** os demais campos.

// ---

// ## üí° Perda de foco iniciada por JavaScript

// Al√©m do clique ou Tab, o foco pode ser perdido por causas indiretas:

// * Um `alert()` tira o foco do campo e o retorna depois que √© fechado.
// * Remover o elemento do DOM causa perda de foco. Se o campo for reinserido, o foco n√£o volta automaticamente.

// Esses comportamentos podem gerar problemas com os eventos `focus` / `blur`.
// ‚ö†Ô∏è Seja cauteloso ao us√°-los para evitar comportamentos indesejados.

// ---

// ## üìå Torne qualquer elemento foc√°vel: `tabindex`

// Por padr√£o, **nem todos os elementos podem receber foco**.

// Elementos interativos como `<button>`, `<input>`, `<select>`, `<a>` **podem**.

// Elementos como `<div>`, `<span>`, `<table>` **n√£o podem**, a menos que tenham o atributo `tabindex`.

// ### Funcionamento do `tabindex`:

// * `tabindex="1"`, `tabindex="2"` ‚Üí define ordem de navega√ß√£o com Tab.
// * `tabindex="0"` ‚Üí torna o elemento foc√°vel **na ordem padr√£o** do documento.
// * `tabindex="-1"` ‚Üí foc√°vel **apenas via JavaScript** (`.focus()`), n√£o com Tab.

// ### Exemplo:

// ```html
// <ul>
//   <li tabindex="1">Um</li>
//   <li tabindex="0">Zero</li>
//   <li tabindex="2">Dois</li>
//   <li tabindex="-1">Menos um</li>
// </ul>

// <style>
//   li { cursor: pointer; }
//   :focus { outline: 1px dashed green; }
// </style>
// ```

// > Ordem ao pressionar Tab: 1 ‚Üí 2 ‚Üí 0.
// > O item com `tabindex="-1"` **n√£o recebe foco com Tab**, apenas com JavaScript.

// ### Em JavaScript: `elem.tabIndex`

// Tamb√©m √© poss√≠vel definir programaticamente:

// ```js
// elemento.tabIndex = 2;
// ```

// ---

// ## üéØ Delega√ß√£o com `focusin` / `focusout`

// Os eventos `focus` e `blur` **n√£o propagam (bubble)**.

// ### Exemplo **que N√ÉO funciona**:

// ```html
// <form onfocus="this.className='focused'">
//   <input name="nome" type="text">
//   <input name="sobrenome" type="text">
// </form>

// <style>
//   .focused { outline: 1px solid red; }
// </style>
// ```

// > O `form` **n√£o recebe o evento**, apenas o `<input>`.

// ### Solu√ß√£o 1: usar **fase de captura**

// ```js
// form.addEventListener("focus", () => form.classList.add('focused'), true);
// form.addEventListener("blur", () => form.classList.remove('focused'), true);
// ```

// > O `true` final ativa a **captura**, funcionando mesmo sem bubbling.

// ### Solu√ß√£o 2: usar `focusin` / `focusout`

// Eles **propagam normalmente**, mas devem ser registrados com `addEventListener`:

// ```js
// form.addEventListener("focusin", () => form.classList.add('focused'));
// form.addEventListener("focusout", () => form.classList.remove('focused'));
// ```

// ---

// ## ‚úÖ Resumo

// * Eventos `focus` e `blur` ocorrem quando o elemento **recebe/perde foco**.
// * **N√£o propagam (n√£o t√™m bubbling)**. Use:

//   * Fase de **captura** (`true` no `addEventListener`)
//   * Ou os eventos alternativos: `focusin` / `focusout`.
// * Use `tabindex` para tornar qualquer elemento foc√°vel.
// * O elemento atualmente focado est√° dispon√≠vel em:

//   ```js
//   document.activeElement
//   ```

// ---

// Se quiser, posso montar um exemplo pr√°tico com valida√ß√£o completa usando `focus`, `blur`, `focusin`, `tabindex` e at√© envio autom√°tico ao servidor. Deseja?
