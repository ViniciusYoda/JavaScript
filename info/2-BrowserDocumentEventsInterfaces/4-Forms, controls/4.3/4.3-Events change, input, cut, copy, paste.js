// Aqui est√° a **vers√£o adaptada para o portugu√™s** do conte√∫do sobre **eventos de mudan√ßa de dados em formul√°rios**:

// ---

// ## ‚úèÔ∏è Eventos: `change`, `input`, `cut`, `copy`, `paste`

// Vamos explorar os principais eventos relacionados √† **modifica√ß√£o de dados** nos formul√°rios e campos de entrada.

// ---

// ## üîÅ Evento: `change`

// O evento `change` √© disparado **quando o valor de um elemento √© alterado e confirmado**.

// ### üß† Para `<input type="text">`:

// O evento `change` s√≥ ocorre **quando o campo perde o foco** (por exemplo, o usu√°rio pressiona Tab ou clica fora).

// ```html
// <input type="text" onchange="alert(this.value)">
// <input type="button" value="Bot√£o">
// ```

// Enquanto estiver digitando, **nenhum evento ocorre**. Apenas quando o foco sai do campo.

// ### ‚úÖ Para `<select>` ou `<input type="checkbox" / radio>`:

// O evento ocorre **imediatamente ap√≥s a mudan√ßa de valor/sele√ß√£o**:

// ```html
// <select onchange="alert(this.value)">
//   <option value="">Selecione algo</option>
//   <option value="1">Op√ß√£o 1</option>
//   <option value="2">Op√ß√£o 2</option>
// </select>
// ```

// ---

// ## ‚å®Ô∏è Evento: `input`

// O evento `input` √© disparado **sempre que o valor de um campo √© modificado** ‚Äî seja por teclado, colar com o mouse, ditado por voz, etc.

// ### Exemplo:

// ```html
// <input type="text" id="input"> oninput: <span id="resultado"></span>

// <script>
//   input.oninput = function() {
//     resultado.innerHTML = input.value;
//   };
// </script>
// ```

// Esse evento √© ideal para acompanhar a digita√ß√£o **em tempo real** ou qualquer outra modifica√ß√£o do conte√∫do.

// ### ‚ö†Ô∏è Observa√ß√µes:

// * O evento `input` **n√£o detecta a√ß√µes sem altera√ß√£o de valor**, como pressionar as setas ‚Üê ou ‚Üí.
// * N√£o √© poss√≠vel usar `event.preventDefault()` aqui, pois o evento ocorre **ap√≥s** a mudan√ßa.

// ---

// ## ‚úÇÔ∏è Eventos: `cut`, `copy`, `paste`

// Esses eventos ocorrem ao **recortar, copiar ou colar** valores nos campos.

// * Eles fazem parte da interface `ClipboardEvent`.
// * Podemos usar `event.preventDefault()` para **bloquear a a√ß√£o**.
// * O acesso ao conte√∫do ocorre via `event.clipboardData`.

// ### Exemplo pr√°tico:

// ```html
// <input type="text" id="input">

// <script>
//   input.onpaste = function(event) {
//     alert("Colado: " + event.clipboardData.getData('text/plain'));
//     event.preventDefault();
//   };

//   input.oncut = input.oncopy = function(event) {
//     alert(event.type + ' - ' + document.getSelection());
//     event.preventDefault();
//   };
// </script>
// ```

// ### ‚ÑπÔ∏è Importante:

// * Durante `cut` e `copy`, `event.clipboardData.getData(...)` pode retornar **string vazia** ‚Äî pois os dados **ainda n√£o foram copiados**.
// * Por isso, usamos `document.getSelection()` para obter o texto selecionado.

// ---

// ## üìÅ Colando arquivos, imagens e mais

// A √°rea de transfer√™ncia (`clipboardData`) permite **copiar/colar qualquer tipo de dado**, n√£o apenas texto ‚Äî inclusive **arquivos**, **imagens**, etc.

// Isso √© poss√≠vel porque `clipboardData` usa a interface `DataTransfer`, tamb√©m usada para **drag and drop**.

// Para intera√ß√µes mais avan√ßadas, existe a API moderna:
// üîí `navigator.clipboard`, que funciona com **permiss√µes** e **de forma ass√≠ncrona** (exceto no Firefox).

// ---

// ## üîí Restri√ß√µes de seguran√ßa

// Como a √°rea de transfer√™ncia √© um recurso global do sistema operacional:

// * Navegadores **s√≥ permitem acesso durante a√ß√µes do usu√°rio**, como copiar/colar.
// * N√£o √© permitido **disparar eventos personalizados de clipboard** via `dispatchEvent`, exceto no Firefox.
// * Tentativas de guardar `event.clipboardData` e usar depois **n√£o funcionar√£o**.

// A alternativa moderna √© usar:

// ```js
// navigator.clipboard.readText()
// navigator.clipboard.writeText("texto")
// ```

// Mas a API solicita permiss√£o ao usu√°rio.

// ---

// ## ‚úÖ Resumo

// | Evento               | Descri√ß√£o                          | Observa√ß√µes                                                                         |
// | -------------------- | ---------------------------------- | ----------------------------------------------------------------------------------- |
// | `change`             | Valor foi alterado e confirmado.   | Em inputs de texto, ocorre ao perder o foco.                                        |
// | `input`              | Valor foi modificado.              | Disparado imediatamente ap√≥s qualquer mudan√ßa.                                      |
// | `cut`/`copy`/`paste` | A√ß√µes de recortar, copiar e colar. | Permitem bloquear com `preventDefault`. Acesso aos dados via `event.clipboardData`. |

// > ‚ö†Ô∏è Use `input` para acompanhar altera√ß√µes em tempo real, `change` para confirmar mudan√ßas e os eventos de clipboard para controlar o comportamento de copiar/colar.

// ---

// Se quiser, posso preparar um exemplo interativo com todos esses eventos funcionando juntos num formul√°rio real. Deseja?
