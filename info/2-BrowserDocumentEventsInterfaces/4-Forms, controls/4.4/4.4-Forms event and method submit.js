// Aqui est√° a vers√£o totalmente adaptada para o **portugu√™s** do conte√∫do sobre **eventos e m√©todos de envio de formul√°rios (`submit`)**:

// ---

// ## üìù Formul√°rios: evento e m√©todo `submit`

// O evento `submit` √© acionado quando um formul√°rio √© enviado. Ele √© geralmente usado para:

// * **Validar os dados** antes de enviar ao servidor.
// * Ou **cancelar o envio** e processar tudo via JavaScript.

// J√° o m√©todo `form.submit()` permite **enviar o formul√°rio manualmente** com JavaScript. Pode ser √∫til quando queremos criar e enviar formul√°rios dinamicamente.

// Vamos ver cada um em detalhes:

// ---

// ## üì§ Evento: `submit`

// Existem **duas formas principais** de submeter um formul√°rio:

// 1. Clicar em um `<input type="submit">` ou `<input type="image">`.
// 2. Pressionar **Enter** dentro de um campo `<input>`.

// Ambas as a√ß√µes disparam o evento `submit` no formul√°rio.
// No manipulador (handler), podemos validar os dados e, caso estejam incorretos, chamar `event.preventDefault()` para **impedir que o formul√°rio seja enviado**.

// ### ‚úÖ Exemplo:

// ```html
// <form onsubmit="alert('Enviando...'); return false;">
//   1. Pressione Enter neste campo: <input type="text" value="Texto"><br>
//   2. Ou clique no bot√£o: <input type="submit" value="Enviar">
// </form>
// ```

// Neste exemplo:

// * Um alerta aparece.
// * O formul√°rio **n√£o √© enviado**, pois retornamos `false`.

// ---

// ## ü§î Rela√ß√£o entre `submit` e `click`

// Se o formul√°rio for enviado **pressionando Enter** em um campo de texto, um evento `click` tamb√©m √© disparado no bot√£o `<input type="submit">`.

// > üß† Curioso, porque **n√£o houve clique real**.

// ### Exemplo:

// ```html
// <form onsubmit="return false;">
//   <input type="text" size="30" value="Foque aqui e pressione Enter">
//   <input type="submit" value="Enviar" onclick="alert('Clique detectado')">
// </form>
// ```

// ---

// ## ‚öôÔ∏è M√©todo: `form.submit()`

// Para enviar um formul√°rio **manualmente** via JavaScript, usamos:

// ```js
// form.submit();
// ```

// ### üî• Importante:

// > Ao usar `form.submit()` **o evento `submit` N√ÉO √© disparado**.
// > Isso porque se o script est√° chamando o envio diretamente, entende-se que ele j√° fez toda a valida√ß√£o.

// ---

// ### üì¶ Exemplo: criando e enviando um formul√°rio dinamicamente

// ```js
// let form = document.createElement('form');
// form.action = 'https://google.com/search';
// form.method = 'GET';

// form.innerHTML = '<input name="q" value="teste">';

// // O formul√°rio precisa estar no DOM para ser enviado
// document.body.append(form);

// // Enviar
// form.submit();
// ```

// ---

// ## ‚úÖ Resumo

// | Conceito          | Descri√ß√£o                                                                                               |
// | ----------------- | ------------------------------------------------------------------------------------------------------- |
// | `submit` (evento) | Disparado quando o formul√°rio √© enviado. Pode ser usado para validar e cancelar com `preventDefault()`. |
// | `form.submit()`   | Envia o formul√°rio via JavaScript. N√£o dispara o evento `submit`.                                       |
// | Enter no campo    | Tamb√©m aciona o bot√£o de envio com evento `click`, mesmo sem clique real.                               |

// > üí° Use `submit` para interceptar o envio e validar os dados.
// > Use `form.submit()` apenas quando precisar enviar o formul√°rio **sem intera√ß√£o direta do usu√°rio**.

// ---

// Se quiser, posso montar um exemplo pr√°tico com valida√ß√£o personalizada e envio controlado. Deseja isso?
