// Aqui est√° a tradu√ß√£o completa e adaptada para o **portugu√™s** sobre os eventos de carregamento de p√°gina: `DOMContentLoaded`, `load`, `beforeunload` e `unload`.

// ---

// ## üåê P√°gina: DOMContentLoaded, load, beforeunload, unload

// O ciclo de vida de uma p√°gina HTML possui **quatro eventos principais**:

// 1. **DOMContentLoaded** ‚Äì quando o navegador carrega completamente o HTML e constr√≥i a √°rvore DOM. Recursos externos como imagens e CSS ainda podem estar carregando.
// 2. **load** ‚Äì quando **tudo** √© carregado: HTML, imagens, estilos, etc.
// 3. **beforeunload** ‚Äì quando o usu√°rio est√° **prestes a sair** da p√°gina.
// 4. **unload** ‚Äì quando o usu√°rio **efetivamente sai** da p√°gina.

// ---

// ### üìå Utilidade de cada evento:

// | Evento             | Quando ocorre         | Para que serve                                         |
// | ------------------ | --------------------- | ------------------------------------------------------ |
// | `DOMContentLoaded` | DOM est√° pronto       | Manipular elementos com JavaScript                     |
// | `load`             | Tudo foi carregado    | Saber quando imagens e estilos j√° foram aplicados      |
// | `beforeunload`     | Antes do usu√°rio sair | Confirmar se ele quer sair (ex: altera√ß√µes n√£o salvas) |
// | `unload`           | O usu√°rio est√° saindo | Executar a√ß√µes r√°pidas, como enviar estat√≠sticas       |

// ---

// ## üì• DOMContentLoaded

// O evento `DOMContentLoaded` ocorre quando o DOM est√° **completamente carregado**, sem esperar por imagens ou estilos.

// **Como usar:**

// ```js
// document.addEventListener("DOMContentLoaded", () => {
//   alert("DOM pronto!");

//   // imagem ainda n√£o carregou: tamanho ser√° 0x0
//   alert(`Tamanho da imagem: ${img.offsetWidth}x${img.offsetHeight}`);
// });
// ```

// ```html
// <img id="img" src="https://en.js.cx/clipart/train.gif?speed=1&cache=0">
// ```

// ---

// ### üß† Detalhes importantes sobre `DOMContentLoaded`:

// * Scripts **bloqueiam** o evento `DOMContentLoaded` at√© serem executados:

// ```html
// <script>
//   document.addEventListener("DOMContentLoaded", () => alert("DOM pronto!"));
// </script>
// <script src="biblioteca.js"></script> <!-- esse script bloqueia o DOMContentLoaded -->
// ```

// * Scripts `async` ou adicionados dinamicamente **n√£o bloqueiam** o DOMContentLoaded.

// * Estilos externos n√£o bloqueiam o DOM, **mas podem atrasar scripts** que dependem deles:

// ```html
// <link rel="stylesheet" href="estilo.css">
// <script>
//   alert(getComputedStyle(document.body).marginTop);
// </script>
// ```

// * Preenchimento autom√°tico de formul√°rios (autofill) por navegadores acontece **ap√≥s** `DOMContentLoaded`.

// ---

// ## üñºÔ∏è `window.onload`

// O evento `load` acontece **quando toda a p√°gina e seus recursos foram carregados**, incluindo imagens.

// **Exemplo:**

// ```js
// window.onload = () => {
//   alert("P√°gina totalmente carregada");
//   alert(`Tamanho da imagem: ${img.offsetWidth}x${img.offsetHeight}`);
// };
// ```

// ```html
// <img id="img" src="https://en.js.cx/clipart/train.gif">
// ```

// ---

// ## üîö `window.onunload`

// O evento `unload` √© disparado quando o usu√°rio **deixa a p√°gina**.

// Recomenda-se **evitar opera√ß√µes demoradas** aqui. Mas podemos enviar dados via `navigator.sendBeacon`:

// ```js
// window.addEventListener("unload", () => {
//   navigator.sendBeacon("/estatisticas", JSON.stringify(dados));
// });
// ```

// * O envio ocorre **em segundo plano**.
// * Tamanho m√°ximo: **64kb**.
// * **Sem retorno do servidor** (pois a p√°gina j√° foi fechada).

// ---

// ## ‚ùó `window.onbeforeunload`

// Usado quando voc√™ quer **alertar o usu√°rio** antes dele sair da p√°gina, como em casos de formul√°rios n√£o salvos.

// ```js
// window.onbeforeunload = function() {
//   return "Voc√™ tem altera√ß√µes n√£o salvas. Deseja realmente sair?";
// };
// ```

// ### Observa√ß√µes:

// * Navegadores modernos **n√£o exibem mais mensagens personalizadas**, apenas alertam que h√° altera√ß√µes.
// * Usar `event.preventDefault()` aqui **n√£o funciona**.
// * Em vez disso, use `event.returnValue = "..."`.

// ```js
// window.addEventListener("beforeunload", (event) => {
//   event.returnValue = "Voc√™ tem altera√ß√µes n√£o salvas.";
// });
// ```

// ---

// ## üìä `document.readyState`

// Voc√™ pode verificar o estado de carregamento da p√°gina com:

// ```js
// console.log(document.readyState);
// ```

// Valores poss√≠veis:

// * `"loading"` ‚Äì a p√°gina ainda est√° carregando.
// * `"interactive"` ‚Äì o DOM foi carregado.
// * `"complete"` ‚Äì tudo foi carregado (DOM + recursos).

// ### Executar algo somente quando o DOM estiver pronto:

// ```js
// function iniciar() {
//   // c√≥digo que depende do DOM
// }

// if (document.readyState === "loading") {
//   document.addEventListener("DOMContentLoaded", iniciar);
// } else {
//   iniciar();
// }
// ```

// ---

// ## üìù Resumo final

// | Evento             | Quando acontece                                                     | Usos principais                                      |
// | ------------------ | ------------------------------------------------------------------- | ---------------------------------------------------- |
// | `DOMContentLoaded` | DOM totalmente carregado (sem imagens e CSS)                        | Interagir com elementos HTML                         |
// | `load`             | Tudo carregado (HTML, imagens, estilos, etc)                        | Trabalhar com imagens e tamanhos reais               |
// | `beforeunload`     | Quando o usu√°rio tenta sair                                         | Mostrar aviso sobre altera√ß√µes n√£o salvas            |
// | `unload`           | O usu√°rio sai da p√°gina                                             | Enviar estat√≠sticas via `navigator.sendBeacon`       |
// | `readyState`       | Estado atual do carregamento (`loading`, `interactive`, `complete`) | Executar c√≥digo baseado no progresso de carregamento |

// ---

// Se quiser, posso te mostrar um exemplo pr√°tico com todos esses eventos funcionando juntos. Deseja isso?
