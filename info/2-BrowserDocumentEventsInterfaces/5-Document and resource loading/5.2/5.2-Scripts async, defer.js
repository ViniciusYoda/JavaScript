// Aqui est√° a adapta√ß√£o completa para o **portugu√™s** do conte√∫do sobre os atributos `async` e `defer` em scripts HTML:

// ---

// ## üìú Scripts: `async` e `defer`

// Nos sites modernos, os **scripts JavaScript costumam ser mais "pesados"** que o HTML: demoram mais para baixar e para serem processados.

// Quando o navegador est√° carregando o HTML e encontra uma tag `<script>`, ele **pausa a constru√ß√£o do DOM** para executar esse script.

// Isso vale tanto para scripts internos:

// ```html
// <script>/* c√≥digo */</script>
// ```

// Quanto para scripts externos:

// ```html
// <script src="arquivo.js"></script>
// ```

// Esse comportamento gera dois problemas:

// 1. O script **n√£o consegue acessar elementos HTML abaixo dele**, pois o DOM ainda n√£o foi constru√≠do.
// 2. Se o script for muito grande e estiver no in√≠cio da p√°gina, ele **bloqueia o carregamento da p√°gina**, impedindo o usu√°rio de ver o conte√∫do at√© que seja totalmente executado.

// ### Exemplo:

// ```html
// <p>...conte√∫do antes do script...</p>

// <script src="script-pesado.js"></script>

// <!-- Isso n√£o ser√° exibido at√© o script carregar -->
// <p>...conte√∫do depois do script...</p>
// ```

// ---

// ### üõ† Solu√ß√£o comum (n√£o ideal)

// Colocar o `<script>` no **final da p√°gina**:

// ```html
// <body>
//   ...todo o conte√∫do da p√°gina...

//   <script src="script.js"></script>
// </body>
// ```

// Assim, o script consegue acessar os elementos acima e **n√£o bloqueia** o conte√∫do.
// Por√©m, o navegador s√≥ come√ßa a baixar o script **depois de carregar todo o HTML**, o que causa atrasos ‚Äî principalmente em conex√µes lentas.

// ---

// ## ‚úÖ As solu√ß√µes modernas: `defer` e `async`

// ### üîÅ Atributo `defer`

// O `defer` diz ao navegador:

// > "Pode continuar carregando a p√°gina. Baixe este script em segundo plano e s√≥ o execute **depois que o DOM estiver pronto**."

// **Exemplo:**

// ```html
// <p>...conte√∫do antes do script...</p>

// <script defer src="script.js"></script>

// <p>...conte√∫do depois do script...</p>
// ```

// #### Comportamento:

// * O conte√∫do da p√°gina aparece **imediatamente**.
// * O script √© executado **somente depois** que o DOM estiver carregado.
// * **Scripts com `defer` mant√™m a ordem** em que aparecem no HTML.

// #### Exemplo com dois scripts:

// ```html
// <script defer src="biblioteca.js"></script>
// <script defer src="meu-script.js"></script>
// ```

// Mesmo que `meu-script.js` carregue primeiro, ele s√≥ ser√° executado **depois** da `biblioteca.js`, respeitando a ordem no HTML.

// > üí° `defer` s√≥ funciona com **scripts externos** (`<script src="...">`). Se usar com script interno, ser√° ignorado.

// ---

// ### ‚ö° Atributo `async`

// O `async` tamb√©m torna o script **n√£o bloqueante**, mas funciona de forma diferente.

// Scripts com `async` s√£o **totalmente independentes**:

// * N√£o bloqueiam o HTML.
// * **N√£o respeitam a ordem** com outros scripts.
// * S√£o executados assim que terminam de carregar ‚Äî **sem esperar o DOM** ou outros scripts.

// **Exemplo:**

// ```html
// <p>...conte√∫do antes dos scripts...</p>

// <script async src="grande.js"></script>
// <script async src="pequeno.js"></script>

// <p>...conte√∫do depois dos scripts...</p>
// ```

// Neste caso:

// * A p√°gina **aparece imediatamente**.
// * O script que carregar primeiro ser√° executado primeiro (ex: `pequeno.js`).
// * O evento `DOMContentLoaded` **pode acontecer antes ou depois** do script, sem garantia de ordem.

// > üí° Use `async` para scripts **independentes**, como an√∫ncios, rastreadores ou Google Analytics:

// ```html
// <script async src="https://google-analytics.com/analytics.js"></script>
// ```

// ---

// ## üß± Scripts din√¢micos

// Tamb√©m √© poss√≠vel **inserir scripts via JavaScript**, assim:

// ```js
// let script = document.createElement('script');
// script.src = "script.js";
// document.body.append(script); // inicia o carregamento
// ```

// Por padr√£o, **scripts din√¢micos se comportam como `async`**.

// Se voc√™ quiser que eles **respeitem a ordem**, use:

// ```js
// script.async = false;
// ```

// ### Exemplo:

// ```js
// function carregarScript(src) {
//   let script = document.createElement('script');
//   script.src = src;
//   script.async = false; // garante ordem
//   document.body.append(script);
// }

// carregarScript("biblioteca.js");
// carregarScript("meu-script.js"); // depende da biblioteca
// ```

// ---

// ## üìä Resumo

// | Atributo | Ordem de execu√ß√£o             | Espera o DOM?       | Ideal para...                                    |
// | -------- | ----------------------------- | ------------------- | ------------------------------------------------ |
// | `async`  | Ordem de **carregamento**     | ‚ùå N√£o espera        | Scripts **independentes** (ads, etc)             |
// | `defer`  | Ordem de **apari√ß√£o no HTML** | ‚úÖ Sim, espera o DOM | Scripts que dependem do DOM ou de outros scripts |

// > ‚úÖ Ambos **n√£o bloqueiam o carregamento da p√°gina**, ou seja, o conte√∫do aparece normalmente enquanto o script carrega.

// ---

// ## ‚ö†Ô∏è Observa√ß√£o importante

// Se voc√™ usa `defer` ou `async`, o usu√°rio pode ver a p√°gina **antes do JavaScript carregar**. Isso significa que:

// * Alguns bot√µes ou funcionalidades podem **ainda n√£o estar prontos**.
// * √â importante exibir um **carregando...** ou **desativar bot√µes temporariamente**, deixando claro que ainda h√° partes sendo carregadas.

// ---

// Se quiser, posso te montar um exemplo completo com `async`, `defer`, `DOMContentLoaded` e `onload` funcionando na pr√°tica. Deseja isso?
