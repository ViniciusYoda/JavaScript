// Aqui est√° a **adapta√ß√£o completa para o portugu√™s** sobre o **MutationObserver**:

// ---

// ## üëÅÔ∏è‚Äçüó®Ô∏è MutationObserver

// `MutationObserver` √© um objeto nativo do JavaScript que permite **observar mudan√ßas em elementos do DOM** e executar um **callback** sempre que uma altera√ß√£o √© detectada.

// ---

// ## üìå Sintaxe

// Usar `MutationObserver` √© simples:

// ### 1. Criamos o observador com uma fun√ß√£o de callback:

// ```js
// let observer = new MutationObserver(callback);
// ```

// ### 2. Associamos esse observador a um n√≥ do DOM:

// ```js
// observer.observe(elemento, config);
// ```

// ### üîß Configura√ß√£o (`config`)

// √â um objeto com op√ß√µes booleanas que definem **o que ser√° observado**:

// * `childList`: mudan√ßas nos **filhos diretos** do elemento.
// * `subtree`: mudan√ßas em **todos os descendentes** (filhos, netos etc).
// * `attributes`: altera√ß√µes nos **atributos** do elemento.
// * `attributeFilter`: um array com **nomes de atributos espec√≠ficos** para observar.
// * `characterData`: observa mudan√ßas no **conte√∫do textual** do n√≥ (`node.data`).

// Outras op√ß√µes √∫teis:

// * `attributeOldValue`: se `true`, envia o **valor antigo** do atributo (requer `attributes`).
// * `characterDataOldValue`: se `true`, envia o **valor antigo** do texto (requer `characterData`).

// ---

// ## üîç Callback e registros de muta√ß√£o

// Quando algo muda, a fun√ß√£o de callback √© chamada com:

// * Uma **lista de objetos `MutationRecord`** (primeiro argumento).
// * O pr√≥prio observador (segundo argumento).

// Cada `MutationRecord` cont√©m informa√ß√µes como:

// | Propriedade                       | Descri√ß√£o                                                      |
// | --------------------------------- | -------------------------------------------------------------- |
// | `type`                            | Tipo da muta√ß√£o (`attributes`, `childList` ou `characterData`) |
// | `target`                          | Elemento ou n√≥ onde ocorreu a mudan√ßa                          |
// | `addedNodes` / `removedNodes`     | N√≥s adicionados ou removidos                                   |
// | `previousSibling` / `nextSibling` | Irm√£os anterior/pr√≥ximo ao n√≥ afetado                          |
// | `attributeName`                   | Nome do atributo alterado                                      |
// | `oldValue`                        | Valor anterior (se configurado)                                |

// ---

// ## üí° Exemplo b√°sico

// ```html
// <div contentEditable id="elem">Clique e <b>edite</b>, por favor</div>
// ```

// ```js
// let observer = new MutationObserver(mutations => {
//   console.log(mutations); // imprime altera√ß√µes
// });

// observer.observe(elem, {
//   childList: true,
//   subtree: true,
//   characterDataOldValue: true
// });
// ```

// Se voc√™ editar o conte√∫do dentro da `<div>`, o console exibir√° as mudan√ßas, como:

// ```js
// [{
//   type: "characterData",
//   oldValue: "edite",
//   target: <n√≥ de texto>
// }]
// ```

// Se voc√™ apagar a tag `<b>edite</b>`, pode haver v√°rios registros:

// ```js
// [{
//   type: "childList",
//   removedNodes: [<b>]
// }, {
//   type: "characterData"
// }]
// ```

// ---

// ## ‚öôÔ∏è Uso para Integra√ß√µes

// Imagine que voc√™ adiciona um script de terceiros que insere um an√∫ncio como:

// ```html
// <div class="ads">An√∫ncio indesejado</div>
// ```

// O script n√£o oferece op√ß√£o para remover o an√∫ncio.

// Usando `MutationObserver`, voc√™ pode detectar quando esse `<div>` √© adicionado ao DOM e remov√™-lo automaticamente.

// Outro caso comum √© adaptar seu layout dinamicamente quando um script de terceiros insere elementos.

// ---

// ## üß± Uso na Arquitetura

// Vamos supor que seu site exiba **c√≥digos fonte**, como:

// ```html
// <pre class="language-javascript"><code>let hello = "world";</code></pre>
// ```

// Para real√ßar a sintaxe, usamos bibliotecas como `Prism.js`. Com isso, aplicamos o destaque com:

// ```js
// document.querySelectorAll('pre[class*="language"]').forEach(Prism.highlightElement);
// ```

// Mas se o conte√∫do for **carregado dinamicamente** via AJAX, como:

// ```js
// articleElem.innerHTML = artigoHtml;
// ```

// Voc√™ ter√° que chamar `Prism.highlightElement()` ap√≥s **cada carregamento**. Isso se torna repetitivo e pouco escal√°vel.

// A solu√ß√£o: **usar `MutationObserver` para detectar quando novos trechos de c√≥digo s√£o inseridos no DOM** e aplicar o destaque automaticamente.

// ---

// ## üß™ Exemplo de destaque din√¢mico

// ```js
// let observer = new MutationObserver(mutations => {
//   for(let mutation of mutations) {
//     for(let node of mutation.addedNodes) {
//       if (!(node instanceof HTMLElement)) continue;

//       if (node.matches('pre[class*="language-"]')) {
//         Prism.highlightElement(node);
//       }

//       for(let elem of node.querySelectorAll('pre[class*="language-"]')) {
//         Prism.highlightElement(elem);
//       }
//     }
//   }
// });

// let demoElem = document.getElementById('highlight-demo');

// observer.observe(demoElem, {childList: true, subtree: true});
// ```

// E depois:

// ```js
// demoElem.innerHTML = `
//   Trecho de c√≥digo abaixo:
//   <pre class="language-javascript"><code>let hello = "world!";</code></pre>
//   <div>Outro exemplo:</div>
//   <pre class="language-css"><code>.classe { margin: 5px; }</code></pre>
// `;
// ```

// O c√≥digo acima observa a `div#highlight-demo` e aplica automaticamente o destaque em qualquer `<pre>` inserido dinamicamente.

// ---

// ## üßØ M√©todos adicionais

// * `observer.disconnect()` ‚Üí para parar a observa√ß√£o.
// * `observer.takeRecords()` ‚Üí retorna uma lista de muta√ß√µes **n√£o processadas** ainda.

// Exemplo:

// ```js
// let pendentes = observer.takeRecords();
// observer.disconnect();
// ```

// > As muta√ß√µes retornadas por `takeRecords()` **n√£o ser√£o mais passadas ao callback**.

// ---

// ## üóëÔ∏è Coleta de Lixo (Garbage Collection)

// O `MutationObserver` **usa refer√™ncias fracas** aos n√≥s observados.
// Se um n√≥ for removido do DOM e **n√£o houver mais refer√™ncias a ele**, ele ser√° coletado normalmente.

// ---

// ## ‚úÖ Resumo

// * `MutationObserver` observa **mudan√ßas no DOM**: adi√ß√£o/remo√ß√£o de n√≥s, atributos, textos, etc.
// * √ötil para:

//   * Detectar altera√ß√µes feitas por scripts externos
//   * Automatizar tarefas, como aplicar realce de c√≥digo
//   * Criar rea√ß√µes din√¢micas a mudan√ßas na interface
// * Permite manter **a l√≥gica centralizada**, sem repetir c√≥digo por toda a aplica√ß√£o.

// ---

// Se quiser, posso montar uma vers√£o pr√°tica com bot√£o "Carregar conte√∫do" para ver o `MutationObserver` funcionando em tempo real. Deseja?
