// Claro! Abaixo est√° a **adapta√ß√£o completa para o portugu√™s** da se√ß√£o sobre a **Fetch API**, incluindo explica√ß√µes e op√ß√µes avan√ßadas:

// ---

// # üì¶ Fetch API ‚Äì Vis√£o Completa

// At√© agora, j√° aprendemos bastante sobre `fetch`. Agora vamos explorar o restante da API para entender todas as suas capacidades.

// > ‚ö†Ô∏è **Nota:** A maioria dessas op√ß√µes s√£o raramente utilizadas. Voc√™ pode pular esta se√ß√£o e continuar utilizando `fetch` normalmente.
// > Ainda assim, √© √∫til saber o que ela pode fazer, caso precise usar esses recursos no futuro.

// ---

// ## ‚úÖ Lista completa de op√ß√µes do `fetch`

// ```js
// let promessa = fetch(url, {
//   method: "GET", // POST, PUT, DELETE, etc.
//   headers: {
//     "Content-Type": "text/plain;charset=UTF-8"
//   },
//   body: undefined, // string, FormData, Blob, BufferSource ou URLSearchParams
//   referrer: "about:client", // ou "" para n√£o enviar o header Referer
//   referrerPolicy: "strict-origin-when-cross-origin", // outras: no-referrer, origin, same-origin, etc.
//   mode: "cors", // same-origin, no-cors
//   credentials: "same-origin", // omit, include
//   cache: "default", // no-store, reload, no-cache, force-cache, only-if-cached
//   redirect: "follow", // manual, error
//   integrity: "", // hash como "sha256-abc123..."
//   keepalive: false, // true para permitir requisi√ß√µes em segundo plano
//   signal: undefined, // AbortController para cancelar a requisi√ß√£o
//   window: window // null (obsoleto)
// });
// ```

// ---

// ## üõ∞Ô∏è `referrer` e `referrerPolicy`

// Controlam o envio do **header `Referer`**.

// ### `referrer`

// Define um referenciador espec√≠fico (deve ser da mesma origem) ou `""` para **n√£o enviar**:

// ```js
// fetch('/pagina', {
//   referrer: "" // n√£o envia o header Referer
// });
// ```

// ### `referrerPolicy`

// Define **regras gerais** para como o `Referer` ser√° enviado:

// | Valor                                        | Para mesma origem  | Para outra origem  | HTTPS ‚Üí HTTP       |
// | -------------------------------------------- | ------------------ | ------------------ | ------------------ |
// | `"no-referrer"`                              | ‚ùå                  | ‚ùå                  | ‚ùå                  |
// | `"no-referrer-when-downgrade"`               | ‚úÖ (completo)       | ‚úÖ (completo)       | ‚ùå                  |
// | `"origin"`                                   | ‚úÖ (somente origem) | ‚úÖ (somente origem) | ‚úÖ (somente origem) |
// | `"origin-when-cross-origin"`                 | ‚úÖ (completo)       | ‚úÖ (somente origem) | ‚úÖ (somente origem) |
// | `"same-origin"`                              | ‚úÖ (completo)       | ‚ùå                  | ‚ùå                  |
// | `"strict-origin"`                            | ‚úÖ (somente origem) | ‚úÖ (somente origem) | ‚ùå                  |
// | `"strict-origin-when-cross-origin"` (padr√£o) | ‚úÖ (completo)       | ‚úÖ (somente origem) | ‚ùå                  |
// | `"unsafe-url"`                               | ‚úÖ (completo)       | ‚úÖ (completo)       | ‚úÖ (completo)       |

// > Exemplo:

// ```js
// fetch('https://outro.com/pagina', {
//   referrerPolicy: "origin-when-cross-origin"
// });
// ```

// ---

// ## üîí `mode`

// Define **restri√ß√µes de seguran√ßa** para requisi√ß√µes cross-origin:

// * `"cors"` ‚Äì padr√£o; permite requisi√ß√µes entre origens com CORS
// * `"same-origin"` ‚Äì pro√≠be requisi√ß√µes entre origens diferentes
// * `"no-cors"` ‚Äì s√≥ permite m√©todos e headers "seguros" para origens diferentes

// ---

// ## üç™ `credentials`

// Controla se **cookies e headers de autentica√ß√£o** s√£o enviados:

// * `"same-origin"` ‚Äì (padr√£o) envia apenas se for mesma origem
// * `"include"` ‚Äì sempre envia (necess√°rio `Access-Control-Allow-Credentials: true`)
// * `"omit"` ‚Äì nunca envia, nem para mesma origem

// ```js
// fetch('https://exemplo.com', {
//   credentials: 'include'
// });
// ```

// ---

// ## üì¶ `cache`

// Controla o uso do **cache HTTP**:

// * `"default"` ‚Äì uso padr√£o baseado nos headers HTTP
// * `"no-store"` ‚Äì ignora completamente o cache
// * `"reload"` ‚Äì ignora cache, mas armazena a nova resposta
// * `"no-cache"` ‚Äì verifica no cache e envia condicionalmente
// * `"force-cache"` ‚Äì usa cache, mesmo que esteja desatualizado
// * `"only-if-cached"` ‚Äì usa cache ou falha (s√≥ com `mode: "same-origin"`)

// ---

// ## üîÅ `redirect`

// Controla como redirecionamentos HTTP s√£o tratados:

// * `"follow"` ‚Äì (padr√£o) segue redirecionamentos automaticamente
// * `"error"` ‚Äì gera erro se houver redirecionamento
// * `"manual"` ‚Äì retorna `opaqueredirect`, permitindo tratar manualmente

// ---

// ## üîê `integrity`

// Verifica a **integridade da resposta** via hash (substitui conte√∫do manipulado):

// ```js
// fetch('http://site.com/arquivo.js', {
//   integrity: 'sha256-abcdef...'
// });
// ```

// Se a hash n√£o bater, o fetch falha.

// ---

// ## üîÑ `keepalive`

// Permite que a requisi√ß√£o continue **mesmo ap√≥s o usu√°rio sair da p√°gina**.

// Muito √∫til para envio de estat√≠sticas no `onunload`:

// ```js
// window.onunload = () => {
//   fetch('/estatisticas', {
//     method: 'POST',
//     body: "cliques=32&tempo=123",
//     keepalive: true
//   });
// };
// ```

// > ‚ö†Ô∏è Limites:

// * Tamanho m√°ximo: 64KB no corpo da requisi√ß√£o (somando todas)
// * N√£o √© poss√≠vel acessar a resposta depois que a p√°gina fecha

// ---

// ## üì¥ `signal`

// J√° abordado em [Fetch: Abort](https://developer.mozilla.org/pt-BR/docs/Web/API/AbortController). Usado para **cancelar requisi√ß√µes** com `AbortController`.

// ```js
// let controller = new AbortController();
// fetch('/dados', { signal: controller.signal });
// controller.abort(); // cancela
// ```

// ---

// ## üîö `window`

// Campo reservado (obsoleto), relacionado ao ambiente de navega√ß√£o.
// Deve ser deixado como `window` ou `null`.

// ---

// ## ‚úÖ Resumo

// A Fetch API √© **muito poderosa** e flex√≠vel. Mesmo que voc√™ use s√≥ `fetch(url)`, saiba que pode personalizar praticamente todos os comportamentos de uma requisi√ß√£o HTTP, incluindo:

// * Seguran√ßa (`credentials`, `referrerPolicy`, `mode`)
// * Cache (`cache`)
// * Redirecionamento (`redirect`)
// * Cancelamento (`signal`)
// * Integridade (`integrity`)
// * Requisi√ß√µes em segundo plano (`keepalive`)

// Se quiser, posso montar um **template reutiliz√°vel** com essas op√ß√µes ou integrar isso a uma fun√ß√£o gen√©rica `apiFetch()`. Deseja isso?
