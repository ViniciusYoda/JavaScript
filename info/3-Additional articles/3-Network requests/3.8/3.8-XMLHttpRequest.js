// Claro! Aqui est√° a **adapta√ß√£o completa em portugu√™s** do conte√∫do sobre `XMLHttpRequest`:

// ---

// ## üì¶ XMLHttpRequest

// O `XMLHttpRequest` √© um objeto nativo do navegador que permite fazer requisi√ß√µes HTTP em JavaScript.

// Apesar de ter "XML" no nome, ele funciona com **qualquer tipo de dado**, n√£o apenas XML. Com ele podemos enviar/receber arquivos, acompanhar o progresso e muito mais.

// Atualmente, existe uma alternativa mais moderna chamada [`fetch`](https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API), que **substitui parcialmente** o `XMLHttpRequest`.

// ### Quando ainda usar XMLHttpRequest?

// * Por **raz√µes hist√≥ricas**, quando h√° scripts legados que usam `XMLHttpRequest`.
// * Para **compatibilidade com navegadores antigos** (sem precisar de polyfill).
// * Para recursos que `fetch` ainda **n√£o oferece**, como acompanhar o progresso de *upload*.

// Se voc√™ se encontra em um desses casos, continue com `XMLHttpRequest`. Caso contr√°rio, √© melhor usar `fetch`.

// ---

// ## üöÄ O b√°sico

// ### Etapas de uma requisi√ß√£o ass√≠ncrona:

// 1. **Criar o objeto:**

// ```js
// let xhr = new XMLHttpRequest();
// ```

// 2. **Inicializar com `open`:**

// ```js
// xhr.open(metodo, url, [ass√≠ncrono = true, usuario, senha])
// ```

// * `metodo`: geralmente `"GET"` ou `"POST"`.
// * `url`: string ou objeto `URL`.
// * `ass√≠ncrono`: se `false`, a requisi√ß√£o √© s√≠ncrona (n√£o recomendado).
// * `usuario`, `senha`: para autentica√ß√£o b√°sica, se necess√°rio.

// > ‚ö†Ô∏è O `open` apenas **prepara** a requisi√ß√£o ‚Äî a conex√£o s√≥ √© aberta ao chamar `send()`.

// 3. **Enviar a requisi√ß√£o:**

// ```js
// xhr.send([corpo])
// ```

// * `corpo`: opcional, como uma string ou `FormData`.

// ---

// ### üß† Eventos principais

// ```js
// xhr.onload = function() {
//   alert(`Conclu√≠do: ${xhr.status} ${xhr.response}`);
// };

// xhr.onerror = function() {
//   alert("Erro de rede");
// };

// xhr.onprogress = function(event) {
//   alert(`Recebido ${event.loaded} de ${event.total}`);
// };
// ```

// ---

// ### üìã Exemplo completo:

// ```js
// let xhr = new XMLHttpRequest();
// xhr.open('GET', '/exemplo/dados.txt');
// xhr.send();

// xhr.onload = function() {
//   if (xhr.status != 200) {
//     alert(`Erro ${xhr.status}: ${xhr.statusText}`);
//   } else {
//     alert(`Sucesso, recebidos ${xhr.response.length} bytes`);
//   }
// };

// xhr.onprogress = function(event) {
//   if (event.lengthComputable) {
//     alert(`Recebidos ${event.loaded} de ${event.total} bytes`);
//   } else {
//     alert(`Recebidos ${event.loaded} bytes`);
//   }
// };

// xhr.onerror = function() {
//   alert("Falha na requisi√ß√£o");
// };
// ```

// ---

// ## üì¶ Propriedades √∫teis

// * `xhr.status` ‚Üí C√≥digo HTTP (200, 404, etc.)
// * `xhr.statusText` ‚Üí Texto descritivo do status
// * `xhr.response` ‚Üí Corpo da resposta (ou `xhr.responseText` em scripts antigos)
// * `xhr.timeout` ‚Üí Tempo limite em milissegundos

// ---

// ## üîé Par√¢metros na URL

// Use o objeto `URL` para adicionar par√¢metros com codifica√ß√£o correta:

// ```js
// let url = new URL('https://google.com/search');
// url.searchParams.set('q', 'test me!');
// xhr.open('GET', url); // https://google.com/search?q=test+me%21
// ```

// ---

// ## üìÑ Tipos de resposta

// Configure com `xhr.responseType`:

// * `""` ou `"text"` ‚Üí string
// * `"arraybuffer"` ‚Üí dados bin√°rios (ex: arquivos)
// * `"blob"` ‚Üí arquivos bin√°rios
// * `"document"` ‚Üí XML ou HTML
// * `"json"` ‚Üí objeto JSON (j√° parseado)

// ```js
// xhr.responseType = 'json';
// ```

// ---

// ## üì∂ Estados da requisi√ß√£o

// ```js
// xhr.readyState
// ```

// | Estado             | Valor | Significado                  |
// | ------------------ | ----- | ---------------------------- |
// | `UNSENT`           | 0     | Criado, mas n√£o inicializado |
// | `OPENED`           | 1     | `open()` foi chamado         |
// | `HEADERS_RECEIVED` | 2     | Cabe√ßalhos recebidos         |
// | `LOADING`          | 3     | Transfer√™ncia em andamento   |
// | `DONE`             | 4     | Conclu√≠do                    |

// Voc√™ pode usar `xhr.onreadystatechange` para acompanhar esses estados (embora seja obsoleto nos projetos modernos).

// ---

// ## ‚ùå Cancelar requisi√ß√£o

// ```js
// xhr.abort(); // cancela
// ```

// Dispara o evento `abort` e `xhr.status` vira 0.

// ---

// ## ‚õî Requisi√ß√µes s√≠ncronas (n√£o recomendado)

// ```js
// xhr.open('GET', '/dados.txt', false);
// xhr.send();
// ```

// ‚ö†Ô∏è Bloqueia toda a execu√ß√£o JavaScript da p√°gina at√© o fim da resposta. Pode travar a rolagem ou exibir alertas do navegador.

// ---

// ## üì¨ Cabe√ßalhos HTTP

// ### Enviar cabe√ßalhos personalizados:

// ```js
// xhr.setRequestHeader('Content-Type', 'application/json');
// ```

// > Alguns cabe√ßalhos como `Referer` e `Host` s√£o protegidos e n√£o podem ser modificados.

// ### Ler cabe√ßalhos da resposta:

// ```js
// xhr.getResponseHeader('Content-Type');
// ```

// ### Todos os cabe√ßalhos:

// ```js
// xhr.getAllResponseHeaders();
// ```

// Para transform√°-los em objeto:

// ```js
// let headers = xhr.getAllResponseHeaders()
//   .split('\r\n')
//   .reduce((acc, line) => {
//     let [chave, valor] = line.split(': ');
//     if (chave) acc[chave] = valor;
//     return acc;
//   }, {});
// ```

// ---

// ## üì§ Enviando dados com `POST`

// ### Com `FormData` (formul√°rio):

// ```html
// <form name="pessoa">
//   <input name="nome" value="Jo√£o">
//   <input name="sobrenome" value="Silva">
// </form>

// <script>
//   let formData = new FormData(document.forms.pessoa);
//   formData.append("idade", 30);

//   let xhr = new XMLHttpRequest();
//   xhr.open("POST", "/api/usuarios");
//   xhr.send(formData);
// </script>
// ```

// ### Com JSON:

// ```js
// let xhr = new XMLHttpRequest();
// xhr.open("POST", "/api/usuarios");

// xhr.setRequestHeader('Content-Type', 'application/json');

// let json = JSON.stringify({ nome: "Jo√£o", sobrenome: "Silva" });

// xhr.send(json);
// ```

// ---

// ## üìà Progresso de upload

// ```js
// xhr.upload.onprogress = function(event) {
//   alert(`Enviado ${event.loaded} de ${event.total} bytes`);
// };
// xhr.upload.onload = function() {
//   alert("Upload conclu√≠do com sucesso.");
// };
// xhr.upload.onerror = function() {
//   alert("Erro no upload.");
// };
// ```

// ### Exemplo real:

// ```html
// <input type="file" onchange="enviarArquivo(this.files[0])">

// <script>
// function enviarArquivo(arquivo) {
//   let xhr = new XMLHttpRequest();

//   xhr.upload.onprogress = e => console.log(`Enviado ${e.loaded} de ${e.total}`);
//   xhr.onloadend = () => console.log(xhr.status == 200 ? "Sucesso" : `Erro ${xhr.status}`);

//   xhr.open("POST", "/upload");
//   xhr.send(arquivo);
// }
// </script>
// ```

// ---

// ## üåç Requisi√ß√µes Cross-Origin

// Para permitir envio de cookies/autentica√ß√£o em requisi√ß√µes entre dom√≠nios, ative:

// ```js
// xhr.withCredentials = true;
// ```

// ---

// ## ‚úÖ Resumo

// ```js
// let xhr = new XMLHttpRequest();

// xhr.open('GET', '/dados');
// xhr.send();

// xhr.onload = () => {
//   if (xhr.status != 200) {
//     alert(`Erro: ${xhr.status}`);
//   } else {
//     alert(xhr.response);
//   }
// };

// xhr.onerror = () => alert("Erro de rede");
// xhr.onprogress = (e) => alert(`Progresso: ${e.loaded} de ${e.total}`);
// ```

// ---

// ### üß© Eventos comuns:

// | Evento      | Descri√ß√£o                              |
// | ----------- | -------------------------------------- |
// | `loadstart` | Requisi√ß√£o come√ßou                     |
// | `progress`  | Dados est√£o sendo recebidos            |
// | `abort`     | Cancelada via `xhr.abort()`            |
// | `error`     | Erro de conex√£o                        |
// | `timeout`   | Tempo limite excedido                  |
// | `load`      | Requisi√ß√£o conclu√≠da com sucesso       |
// | `loadend`   | Fim da requisi√ß√£o (com ou sem sucesso) |

// ---

// Se quiser, posso montar um **template reutiliz√°vel de requisi√ß√£o com XMLHttpRequest** para seus projetos. Deseja que eu fa√ßa?
