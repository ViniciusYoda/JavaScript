// Claro! Aqui est√° **toda a explica√ß√£o adaptada para o portugu√™s**, com exemplos e termos t√©cnicos explicados de forma clara e organizada:

// ---

// # üç™ Cookies e `document.cookie`

// Cookies s√£o **pequenas strings de dados armazenadas pelo navegador**, parte do protocolo HTTP, conforme definido pela especifica√ß√£o [RFC 6265](https://datatracker.ietf.org/doc/html/rfc6265).

// ## üí° Para que servem?

// Cookies s√£o amplamente usados para:

// * Autentica√ß√£o de usu√°rios.
// * Armazenamento de prefer√™ncias.
// * Rastreamento entre sess√µes.
// * Identifica√ß√£o em acessos futuros.

// ### Exemplo comum ‚Äì autentica√ß√£o:

// 1. O usu√°rio faz login;
// 2. O servidor responde com um cabe√ßalho `Set-Cookie` contendo um identificador de sess√£o;
// 3. A cada nova requisi√ß√£o para o mesmo dom√≠nio, o navegador envia o cookie automaticamente no cabe√ßalho `Cookie`;
// 4. O servidor identifica o usu√°rio com base no valor do cookie.

// Tamb√©m √© poss√≠vel acessar os cookies diretamente no navegador usando a propriedade `document.cookie`.

// ---

// ## üìñ Lendo cookies com `document.cookie`

// ```js
// alert(document.cookie); // user=Jo√£o; tema=escuro; token=abc123...
// ```

// O valor retornado por `document.cookie` √© uma string no formato `nome=valor; nome2=valor2; ...`.

// Para buscar um cookie espec√≠fico, podemos dividir essa string com `split(';')` e usar fun√ß√µes de array ou express√µes regulares.

// ---

// ## ‚úçÔ∏è Escrevendo cookies

// Apesar de parecer uma propriedade, `document.cookie` √© na verdade um **getter/setter especial**.

// ### Exemplo:

// ```js
// document.cookie = "user=Jo√£o";
// alert(document.cookie); // exibe todos os cookies, incluindo user=Jo√£o
// ```

// > Esse comando **n√£o substitui todos os cookies**, apenas atualiza ou cria o que foi mencionado.

// Para garantir que o nome e o valor estejam formatados corretamente (sem espa√ßos, acentos etc.), usamos:

// ```js
// let nome = "meu nome";
// let valor = "Jo√£o da Silva";

// document.cookie = encodeURIComponent(nome) + "=" + encodeURIComponent(valor);
// ```

// ---

// ## ‚ö†Ô∏è Limita√ß√µes

// * S√≥ √© poss√≠vel definir/atualizar **um √∫nico cookie por vez**;
// * O tamanho m√°ximo de um cookie √© de **aproximadamente 4KB**;
// * Cada dom√≠nio suporta cerca de **20 cookies** (varia por navegador).

// ---

// ## üìå Atributos de cookies

// Ao definir um cookie, podemos adicionar **atributos** para controlar seu comportamento. Eles s√£o adicionados ap√≥s o `nome=valor`, separados por `;`.

// ### `path`

// Define o caminho da URL em que o cookie ser√° acess√≠vel.

// ```js
// document.cookie = "user=Jo√£o; path=/admin";
// ```

// > Com `path=/admin`, o cookie estar√° dispon√≠vel em `/admin` e seus subcaminhos. O ideal √© usar `path=/` para torn√°-lo acess√≠vel em todas as p√°ginas.

// ---

// ### `domain`

// Define para **quais dom√≠nios e subdom√≠nios** o cookie ser√° vis√≠vel.

// Por padr√£o, o cookie √© vis√≠vel **apenas para o dom√≠nio atual**.

// ```js
// // Torna o cookie acess√≠vel para *.meusite.com
// document.cookie = "user=Jo√£o; domain=meusite.com";
// ```

// ---

// ### `expires` e `max-age`

// Sem esses atributos, o cookie √© chamado de **cookie de sess√£o** e desaparece ao fechar o navegador.

// #### `expires` define uma data de expira√ß√£o:

// ```js
// let data = new Date(Date.now() + 86400e3); // +1 dia
// document.cookie = "user=Jo√£o; expires=" + data.toUTCString();
// ```

// #### `max-age` define em segundos:

// ```js
// document.cookie = "user=Jo√£o; max-age=3600"; // 1 hora
// ```

// Para **deletar** um cookie:

// ```js
// document.cookie = "user=Jo√£o; max-age=0";
// ```

// ---

// ### `secure`

// Garante que o cookie s√≥ ser√° enviado em conex√µes **HTTPS**.

// ```js
// document.cookie = "user=Jo√£o; secure";
// ```

// ---

// ### `samesite`

// Controla se o cookie ser√° enviado em requisi√ß√µes **vindas de outros dom√≠nios** (protege contra ataques XSRF).

// #### `samesite=strict`

// * O cookie **n√£o √© enviado** se a requisi√ß√£o **vem de fora do site**.
// * Exemplo: se o usu√°rio clicar em um link ou submeter um formul√°rio vindo de outro site, o cookie n√£o ser√° enviado.

// #### `samesite=lax`

// * Prote√ß√£o mais "leve".
// * O cookie **√© enviado** em requisi√ß√µes GET **com navega√ß√£o de topo** (como clicar em um link).
// * Mas **n√£o √© enviado** em formul√°rios POST ou requisi√ß√µes AJAX de terceiros.

// ```js
// document.cookie = "user=Jo√£o; samesite=strict";
// ```

// ---

// ### `httpOnly`

// Definido **pelo servidor**, evita que o cookie seja acessado via JavaScript.

// ```http
// Set-Cookie: sessionId=abc123; HttpOnly
// ```

// > Isso impede que scripts maliciosos (XSS) roubem cookies sens√≠veis como tokens de autentica√ß√£o.

// ---

// ## üìö Fun√ß√µes auxiliares para cookies

// ### `getCookie(nome)`

// ```js
// function getCookie(name) {
//   let match = document.cookie.match(new RegExp(
//     "(?:^|; )" + name.replace(/([$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
//   ));
//   return match ? decodeURIComponent(match[1]) : undefined;
// }
// ```

// ---

// ### `setCookie(nome, valor, atributos)`

// ```js
// function setCookie(name, value, attributes = {}) {
//   attributes = {
//     path: '/',
//     ...attributes
//   };

//   if (attributes.expires instanceof Date) {
//     attributes.expires = attributes.expires.toUTCString();
//   }

//   let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

//   for (let key in attributes) {
//     updatedCookie += "; " + key;
//     if (attributes[key] !== true) {
//       updatedCookie += "=" + attributes[key];
//     }
//   }

//   document.cookie = updatedCookie;
// }

// // Exemplo:
// setCookie('user', 'Jo√£o', { secure: true, 'max-age': 3600 });
// ```

// ---

// ### `deleteCookie(nome)`

// ```js
// function deleteCookie(name) {
//   setCookie(name, "", {
//     'max-age': -1
//   });
// }
// ```

// > ‚ö†Ô∏è Para deletar, voc√™ deve usar o mesmo `path` e `domain` usados ao definir o cookie.

// ---

// ## üç™ Cookies de terceiros (third-party cookies)

// S√£o cookies definidos por **dom√≠nios diferentes do que o usu√°rio est√° acessando**.

// ### Exemplo:

// ```html
// <img src="https://ads.com/banner.png">
// ```

// O site `ads.com` pode definir um cookie no navegador. Esse cookie **n√£o √© vis√≠vel** para `meusite.com`, mas ser√° enviado nas pr√≥ximas requisi√ß√µes feitas a `ads.com`, mesmo que em outros sites.

// Por isso, cookies de terceiros s√£o usados para **rastreamento entre sites**.

// ### Restri√ß√µes modernas:

// * **Safari**: bloqueia todos cookies de terceiros.
// * **Firefox**: possui listas negras para bloquear cookies de rastreadores.
// * **Chrome**: est√° implementando bloqueios similares.

// ---

// ## üõ°Ô∏è GDPR (Lei Europeia de Prote√ß√£o de Dados)

// Se voc√™ coleta **cookies de rastreamento ou identifica√ß√£o**, √© necess√°rio:

// 1. **Pedir consentimento expl√≠cito** do usu√°rio (ex: um banner de cookies);
// 2. **Explicar a finalidade** do cookie em sua pol√≠tica de privacidade.

// Cookies que apenas salvam prefer√™ncias (ex: tema escuro) n√£o precisam de autoriza√ß√£o.

// ---

// ## ‚úÖ Resumo

// * `document.cookie` permite **ler e escrever** cookies;
// * Cookies s√£o enviados automaticamente pelo navegador em requisi√ß√µes para o mesmo dom√≠nio;
// * Cada cookie √© uma string `nome=valor` com atributos opcionais (`path`, `domain`, `expires`, `secure`, etc.);
// * Cookies s√£o limitados em tamanho e quantidade por dom√≠nio;
// * Atributos como `secure`, `httpOnly` e `samesite` s√£o **essenciais para seguran√ßa**;
// * Cookies de terceiros s√£o usados para rastreamento, mas podem ser bloqueados por navegadores;
// * Para usu√°rios da Uni√£o Europeia, **a GDPR exige consentimento para rastreamento** via cookies.

// ---

// Se quiser, posso gerar um script real de exemplo com uso de cookies no navegador ou configurar o backend para definir cookies com seguran√ßa. Deseja isso?
