// Claro! Abaixo est√° a explica√ß√£o **completa, traduzida e adaptada para o portugu√™s**, sobre o uso de `localStorage` e `sessionStorage` em JavaScript.

// ---

// # üóÇÔ∏è `localStorage` e `sessionStorage` (Armazenamento Web)

// Os objetos **`localStorage`** e **`sessionStorage`** permitem armazenar **pares chave/valor** diretamente no navegador, de forma persistente.

// ---

// ## üß† Diferen√ßas principais

// | Caracter√≠stica                | `localStorage`                                       | `sessionStorage`                                |
// | ----------------------------- | ---------------------------------------------------- | ----------------------------------------------- |
// | Escopo                        | Compartilhado entre **abas e janelas** do mesmo site | Vis√≠vel apenas na **aba atual**                 |
// | Expira√ß√£o                     | **Nunca expira**, persiste at√© ser apagado           | **Expira ao fechar a aba ou guia do navegador** |
// | Sobrevive a recarregamento    | ‚úÖ Sim                                                | ‚úÖ Sim                                           |
// | Sobrevive ao fechar navegador | ‚úÖ Sim                                                | ‚ùå N√£o                                           |

// ---

// ## üç™ Por que usar em vez de cookies?

// * **Cookies s√£o enviados automaticamente** ao servidor a cada requisi√ß√£o HTTP. Isso pode gerar tr√°fego desnecess√°rio.
// * **Armazenamento Web n√£o √© enviado ao servidor**, √© acess√≠vel apenas por JavaScript no lado do cliente.
// * **Capacidade muito maior**: enquanto cookies suportam \~4KB, o `localStorage` e `sessionStorage` geralmente permitem **5MB ou mais** por dom√≠nio.

// ---

// ## üß∞ M√©todos dispon√≠veis

// Tanto `localStorage` quanto `sessionStorage` possuem os mesmos m√©todos:

// ```js
// setItem(chave, valor);       // Armazena
// getItem(chave);              // L√™ o valor pela chave
// removeItem(chave);           // Remove o par chave/valor
// clear();                     // Limpa todo o armazenamento
// key(√≠ndice);                 // Retorna a chave no √≠ndice fornecido
// length                      // Quantidade de itens armazenados
// ```

// ---

// ## üì¶ Exemplo com `localStorage`

// ```js
// // Armazenando um dado
// localStorage.setItem('nome', 'Jo√£o');

// // Recuperando
// alert(localStorage.getItem('nome')); // Jo√£o

// // Removendo
// localStorage.removeItem('nome');

// // Limpando tudo
// localStorage.clear();
// ```

// ### ‚úÖ Dado permanece mesmo ap√≥s fechar o navegador

// ```js
// localStorage.setItem('tema', 'escuro');
// // mesmo ap√≥s reiniciar o PC, o valor continuar√° acess√≠vel
// ```

// ---

// ## üß≠ Acesso tipo objeto (n√£o recomendado)

// Tamb√©m funciona:

// ```js
// localStorage.idade = 25;
// alert(localStorage.idade); // 25
// delete localStorage.idade;
// ```

// Mas **n√£o √© recomendado**, pois:

// * N√£o dispara o evento `storage`;
// * Pode conflitar com m√©todos internos (`length`, `toString`, etc).

// ---

// ## üîÅ Iterando sobre os dados

// ```js
// for (let i = 0; i < localStorage.length; i++) {
//   let chave = localStorage.key(i);
//   let valor = localStorage.getItem(chave);
//   console.log(`${chave}: ${valor}`);
// }
// ```

// Ou de forma mais segura:

// ```js
// for (let chave of Object.keys(localStorage)) {
//   console.log(`${chave}: ${localStorage.getItem(chave)}`);
// }
// ```

// ---

// ## üîí Armazena apenas strings

// Ambas as chaves e valores devem ser **strings**.

// ```js
// localStorage.setItem('numero', 123); // vira "123"
// ```

// ### Para armazenar objetos ou arrays, use `JSON`:

// ```js
// // Armazenar
// localStorage.setItem('usuario', JSON.stringify({ nome: 'Jo√£o', idade: 30 }));

// // Recuperar
// let usuario = JSON.parse(localStorage.getItem('usuario'));
// console.log(usuario.nome); // Jo√£o
// ```

// ---

// ## üß™ Debug: visualizar todo o conte√∫do formatado

// ```js
// alert(JSON.stringify(localStorage, null, 2));
// ```

// ---

// ## üïí `sessionStorage`: Armazenamento tempor√°rio

// * Funciona **igual ao `localStorage`**, mas √© limitado **√† aba atual**;
// * Dados **somem ao fechar a aba** (mesmo sem fechar o navegador);

// ```js
// sessionStorage.setItem('temporario', 'valor');
// ```

// ---

// ## ü™Å Evento `storage`

// Sempre que `localStorage` (ou `sessionStorage`) √© modificado, o navegador dispara o evento `storage` **em todas as outras abas** (exceto na aba que fez a altera√ß√£o):

// ```js
// window.addEventListener('storage', function(event) {
//   console.log(`Chave alterada: ${event.key}`);
//   console.log(`Novo valor: ${event.newValue}`);
//   console.log(`URL: ${event.url}`);
//   console.log(`√Årea de armazenamento:`, event.storageArea);
// });
// ```

// ### Observa√ß√µes:

// * Funciona **entre abas diferentes**, mas **n√£o dentro da mesma aba**;
// * Funciona com `sessionStorage` **somente dentro de iframes** da mesma aba.

// ---

// ## üì° Comunica√ß√£o entre abas

// Usar `localStorage` com evento `storage` √© uma forma de **enviar mensagens entre abas**:

// ```js
// // Na aba 1
// localStorage.setItem('mensagem', 'Ol√° do outro lado!');

// // Na aba 2
// window.addEventListener('storage', e => {
//   if (e.key === 'mensagem') {
//     alert(e.newValue); // exibe: "Ol√° do outro lado!"
//   }
// });
// ```

// > Para comunica√ß√£o mais robusta, existe a [Broadcast Channel API](https://developer.mozilla.org/pt-BR/docs/Web/API/Broadcast_Channel_API), embora com suporte limitado em navegadores antigos.

// ---

// ## ‚úÖ Resumo

// * `localStorage` e `sessionStorage` armazenam dados **em pares chave/valor** diretamente no navegador.
// * **Ambos suportam apenas strings** (objetos devem ser convertidos com `JSON.stringify`).
// * M√©todos principais: `setItem`, `getItem`, `removeItem`, `clear`, `key`, `length`.
// * **`localStorage`**:

//   * Persiste ap√≥s fechar o navegador;
//   * Compartilhado entre todas as abas e janelas do mesmo dom√≠nio.
// * **`sessionStorage`**:

//   * Dura apenas enquanto a aba estiver aberta;
//   * Vis√≠vel somente na aba onde foi criado.
// * O evento `storage` permite detectar mudan√ßas em outras abas do mesmo dom√≠nio.

// ---

// Se quiser, posso te mostrar como aplicar isso em projetos reais como:

// * Lembrar o tema claro/escuro do site;
// * Armazenar carrinho de compras;
// * Salvar progresso em formul√°rios;
// * Comunicar abas abertas de um sistema logado.

// Deseja algum exemplo espec√≠fico na pr√°tica?
