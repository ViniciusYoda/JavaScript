// Claro! Aqui est√° a **tradu√ß√£o e adapta√ß√£o completa para o portugu√™s** do conte√∫do sobre **Shadow DOM (DOM Sombra)**:

// ---

// ## Shadow DOM (DOM Sombra)

// O **Shadow DOM** serve para **encapsulamento**. Ele permite que um componente tenha sua pr√≥pria √°rvore DOM ‚Äúsombra‚Äù, que:

// * N√£o pode ser acessada acidentalmente pelo restante do documento,
// * Pode ter estilos locais,
// * E muito mais.

// ---

// ### Shadow DOM interno (nativo)

// Voc√™ j√° se perguntou como os controles dos navegadores s√£o criados e estilizados?

// Por exemplo, `<input type="range">` (um controle deslizante):

// ‚û°Ô∏è O navegador usa DOM e CSS internamente para renderiz√°-lo.
// Essa estrutura DOM √© normalmente oculta de n√≥s, mas pode ser vista nas ferramentas de desenvolvedor (DevTools).

// No **Chrome**, por exemplo, voc√™ precisa ativar a op√ß√£o:

// > **"Show user agent shadow DOM"** (Mostrar DOM sombra do agente do usu√°rio)

// A√≠ o `<input type="range">` se parece com isso:

// *(imagem corrompida)*

// O que aparece dentro de `#shadow-root` √© o chamado **"Shadow DOM"**.

// Esses elementos do DOM sombra **n√£o podem ser acessados via JavaScript comum ou seletores**. Eles n√£o s√£o filhos normais, mas sim parte de uma poderosa t√©cnica de encapsulamento.

// Nesse exemplo, vemos tamb√©m um atributo √∫til chamado `pseudo`, que √© **n√£o padronizado** (existe por motivos hist√≥ricos). Podemos us√°-lo para estilizar partes internas com CSS, como:

// ```css
// /* deixa a faixa do controle deslizante vermelha */
// input::-webkit-slider-runnable-track {
//   background: red;
// }
// ```

// ‚ö†Ô∏è Esse atributo √© experimental. Os navegadores come√ßaram a usar estruturas DOM internas antes do Shadow DOM ser padronizado.

// Hoje usamos o padr√£o moderno do Shadow DOM, conforme especificado na especifica√ß√£o DOM.

// ---

// ## √Årvore Sombra

// Um elemento DOM pode ter dois tipos de sub√°rvores:

// * **√Årvore "light" (leve)** ‚Äì DOM tradicional, formado pelos filhos definidos no HTML.
// * **√Årvore "shadow" (sombra)** ‚Äì DOM oculto, **n√£o refletido no HTML**, escondido do restante do documento.

// Se um elemento tiver ambas, o navegador **renderiza apenas a √°rvore sombra**. Mas √© poss√≠vel compor as duas (veremos isso no cap√≠tulo sobre slots).

// A √°rvore sombra pode ser usada com **elementos personalizados** para esconder a estrutura interna e aplicar estilos locais.

// ---

// ### Exemplo: `<mostrar-ola>`

// ```html
// <script>
// customElements.define('mostrar-ola', class extends HTMLElement {
//   connectedCallback() {
//     const sombra = this.attachShadow({mode: 'open'});
//     sombra.innerHTML = `<p>Ol√°, ${this.getAttribute('name')}</p>`;
//   }
// });
// </script>

// <mostrar-ola name="Jo√£o"></mostrar-ola>
// ```

// üí° Resultado no Chrome DevTools: o conte√∫do fica sob `#shadow-root`.

// #### A chamada:

// ```js
// elem.attachShadow({mode: 'open'})
// ```

// ...cria a √°rvore sombra.

// ---

// ### Restri√ß√µes:

// 1. **Apenas um shadow root por elemento.**
// 2. O elemento deve ser personalizado ou um dos seguintes:
//    `article`, `aside`, `blockquote`, `body`, `div`, `footer`, `h1‚Äìh6`, `header`, `main`, `nav`, `p`, `section`, ou `span`.
//    Tags como `<img>` **n√£o podem** hospedar um shadow root.

// ---

// ### O par√¢metro `mode` define o n√≠vel de encapsulamento:

// * `"open"` ‚Üí acess√≠vel via `elem.shadowRoot`
// * `"closed"` ‚Üí `elem.shadowRoot` sempre ser√° `null`
//   (s√≥ pode ser acessado pela refer√™ncia retornada por `attachShadow`)

// üí° O Shadow DOM nativo de elementos como `<input type="range">` √© do tipo **"closed"** ‚Äì **n√£o h√° como acess√°-lo.**

// ---

// ### Shadow root funciona como um elemento:

// Podemos usar `innerHTML`, `append`, `querySelector`, etc.

// ```js
// elem.shadowRoot.innerHTML = '<p>Ol√°</p>';
// alert(elem.shadowRoot.host === elem); // true
// ```

// ---

// ## Encapsulamento

// O Shadow DOM √© fortemente isolado do documento principal:

// * Elementos dentro do shadow **n√£o s√£o vis√≠veis por seletores como `querySelector` no documento principal**.
// * IDs podem se repetir dentro e fora da sombra, pois s√£o √∫nicos apenas dentro do shadow.
// * **Estilos externos n√£o se aplicam** ao conte√∫do do shadow.

// ---

// ### Exemplo:

// ```html
// <style>
//   /* Este estilo N√ÉO afeta o shadow DOM */
//   p { color: red; }
// </style>

// <div id="elem"></div>

// <script>
//   elem.attachShadow({mode: 'open'});
//   elem.shadowRoot.innerHTML = `
//     <style> p { font-weight: bold; } </style>
//     <p>Ol√°, Jo√£o!</p>
//   `;

//   alert(document.querySelectorAll('p').length); // 0
//   alert(elem.shadowRoot.querySelectorAll('p').length); // 1
// </script>
// ```

// * O estilo do documento **n√£o afeta** o shadow.
// * O estilo definido **dentro** do shadow funciona normalmente.
// * Para acessar elementos do shadow, usamos `elem.shadowRoot.querySelector`.

// ---

// ## Refer√™ncias

// * Especifica√ß√£o DOM:
//   üìÑ [https://dom.spec.whatwg.org/#shadow-trees](https://dom.spec.whatwg.org/#shadow-trees)
// * Compatibilidade entre navegadores:
//   ‚úÖ [https://caniuse.com/#feat=shadowdomv1](https://caniuse.com/#feat=shadowdomv1)

// ---

// ## Resumo

// * **Shadow DOM** √© uma maneira de criar um **DOM isolado e encapsulado**, exclusivo do componente.

// ### Como criar:

// ```js
// const shadowRoot = elem.attachShadow({ mode: 'open' });
// ```

// * Se `mode = 'open'`, o DOM pode ser acessado por `elem.shadowRoot`.
// * Podemos preencher o conte√∫do com `innerHTML`, `appendChild`, etc.

// ### Caracter√≠sticas:

// * Elementos do Shadow DOM:

//   * T√™m **espa√ßo pr√≥prio para IDs**,
//   * S√£o **invis√≠veis para seletores externos** (`querySelector`, etc),
//   * Usam **estilos locais**, ignorando estilos do documento principal.

// * Se o Shadow DOM estiver presente, ele **substitui** a √°rvore DOM tradicional na renderiza√ß√£o.

// ‚û°Ô∏è No cap√≠tulo **Slots e Composi√ß√£o com Shadow DOM**, veremos como combinar o conte√∫do do DOM principal com o DOM sombra.

// ---

// Se quiser, posso preparar um exemplo pr√°tico com slot, CSS isolado e intera√ß√£o entre Shadow DOM e atributos. Deseja isso?
