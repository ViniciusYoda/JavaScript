// Claro! Aqui est√° a **adapta√ß√£o completa em portugu√™s** do conte√∫do sobre **Lookahead e Lookbehind** (tamb√©m chamados de *lookarounds*) em express√µes regulares:

// ---

// ## üëÄ Lookahead e Lookbehind (Lookaround)

// √Äs vezes, precisamos encontrar um padr√£o **somente se ele for seguido ou precedido por outro padr√£o**.

// Para isso, usamos **lookahead** (olhar √† frente) e **lookbehind** (olhar para tr√°s), juntos chamados de **lookaround**.

// ---

// ## üîÆ Lookahead (olhar √† frente)

// ### ‚úÖ Sintaxe:

// ```
// X(?=Y)
// ```

// Significa: **procure X apenas se for seguido por Y**.
// ‚ö†Ô∏è O conte√∫do de `(?=Y)` **n√£o entra no resultado final**.

// ### üß™ Exemplo pr√°tico:

// ```js
// let str = "1 peru custa 30‚Ç¨";

// let resultado = str.match(/\d+(?=‚Ç¨)/);

// alert(resultado); // 30
// ```

// * `\d+` encontra o n√∫mero.
// * `(?=‚Ç¨)` exige que venha um "‚Ç¨" logo depois.
// * Mas **o "‚Ç¨" n√£o aparece no resultado**.

// ---

// ### üß† Lookahead com m√∫ltiplas condi√ß√µes

// Voc√™ pode usar **v√°rios lookaheads** em sequ√™ncia:

// ```js
// let str = "1 peru custa 30‚Ç¨";

// let resultado = str.match(/\d+(?=\s)(?=.*30)/);

// alert(resultado); // 1
// ```

// * `(?=\s)` exige um espa√ßo ap√≥s o n√∫mero.
// * `(?=.*30)` verifica se existe "30" depois, em qualquer parte da string.

// ---

// ## ‚ùå Lookahead negativo

// ### üî• Sintaxe:

// ```
// X(?!Y)
// ```

// Significa: **procure X apenas se N√ÉO for seguido por Y**.

// ### üß™ Exemplo:

// ```js
// let str = "2 perus custam 60‚Ç¨";

// let resultado = str.match(/\d+\b(?!‚Ç¨)/g);

// alert(resultado); // 2
// ```

// * Encontra **n√∫meros que n√£o s√£o seguidos por "‚Ç¨"**.

// ---

// ## üîô Lookbehind (olhar para tr√°s)

// > ‚ö†Ô∏è **Compatibilidade:** Nem todos os navegadores suportam Lookbehind. Est√° dispon√≠vel apenas em **navegadores com motor V8**, como o Chrome.

// ### ‚úÖ Sintaxe:

// * **Lookbehind positivo:** `(?<=Y)X` ‚Üí casa com `X`, **se for precedido por `Y`**
// * **Lookbehind negativo:** `(?<!Y)X` ‚Üí casa com `X`, **se N√ÉO for precedido por `Y`**

// ---

// ### üß™ Exemplo de Lookbehind positivo:

// ```js
// let str = "1 peru custa $30";

// let resultado = str.match(/(?<=\$)\d+/);

// alert(resultado); // 30
// ```

// * `(?<=\$)` exige que antes do n√∫mero venha um **\$**.
// * O s√≠mbolo **\$ n√£o aparece no resultado**.

// ---

// ### üß™ Exemplo de Lookbehind negativo:

// ```js
// let str = "2 perus custam $60";

// let resultado = str.match(/(?<!\$)\b\d+/g);

// alert(resultado); // 2
// ```

// * Encontra **n√∫meros que n√£o v√™m depois de um \$**.

// ---

// ## üéØ Capturando conte√∫do dentro do lookaround

// Normalmente, o conte√∫do do lookaround **n√£o aparece no resultado**. Mas voc√™ pode **captur√°-lo** com um par de par√™nteses adicionais.

// ### üß™ Exemplo com lookahead e captura:

// ```js
// let str = "1 peru custa 30‚Ç¨";

// let regexp = /\d+(?=(‚Ç¨|kr))/;

// alert(str.match(regexp)); // 30, ‚Ç¨
// ```

// * O valor (‚Ç¨ ou kr) √© capturado, pois est√° entre par√™nteses.

// ---

// ### üß™ Exemplo com lookbehind e captura:

// ```js
// let str = "1 peru custa $30";

// let regexp = /(?<=(\$|¬£))\d+/;

// alert(str.match(regexp)); // 30, $
// ```

// ---

// ## üìã Resumo dos tipos de lookaround

// | Express√£o | Tipo                | Significado                                |
// | --------- | ------------------- | ------------------------------------------ |
// | `X(?=Y)`  | Lookahead positivo  | Casa com `X`, se seguido por `Y`           |
// | `X(?!Y)`  | Lookahead negativo  | Casa com `X`, se **n√£o** seguido por `Y`   |
// | `(?<=Y)X` | Lookbehind positivo | Casa com `X`, se precedido por `Y`         |
// | `(?<!Y)X` | Lookbehind negativo | Casa com `X`, se **n√£o** precedido por `Y` |

// ---

// ## üõ†Ô∏è Alternativa sem lookaround

// Se o seu navegador n√£o suportar lookbehind, voc√™ pode:

// * **Usar `matchAll`** e checar o contexto via `index` no resultado.
// * **Fazer um filtro manual** ap√≥s o `match` tradicional.

// ---

// Se quiser, posso:

// * üß™ Criar exerc√≠cios com lookahead/lookbehind
// * üí° Criar regex para validar CPF, pre√ßos, e-mails etc.
// * ‚úÖ Indicar onde o lookaround melhora a legibilidade

// Deseja ver algum exemplo aplicado ao seu c√≥digo real?
