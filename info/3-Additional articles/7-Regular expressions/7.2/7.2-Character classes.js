// Aqui est√° um **resumo pr√°tico e did√°tico sobre classes de caracteres em express√µes regulares (RegExp) no JavaScript**, com exemplos e explica√ß√µes diretas:

// ---

// ## üß± O que s√£o **classes de caracteres**?

// Classes de caracteres s√£o **atalhos que representam grupos comuns de caracteres**, como d√≠gitos, letras ou espa√ßos.

// ---

// ## üîπ As classes principais

// | Classe | Significado                         | Exemplo pr√°tico                                        |
// | ------ | ----------------------------------- | ------------------------------------------------------ |
// | `\d`   | **D√≠gito** (0 a 9)                  | `/\d/` ‚Üí encontra "3" em `"a3b"`                       |
// | `\D`   | **N√£o d√≠gito**                      | `/\D/` ‚Üí encontra "a" em `"a3b"`                       |
// | `\s`   | **Espa√ßo** (espa√ßo, tab, \n...)     | `/\s/` ‚Üí encontra " " em `"a b"`                       |
// | `\S`   | **N√£o espa√ßo**                      | `/\S/` ‚Üí encontra "a" em `" a"`                        |
// | `\w`   | **Caracter "de palavra"**           | letras latinas, n√∫meros e `_`                          |
// | `\W`   | **N√£o "de palavra"**                | s√≠mbolos como `@`, `-`, espa√ßo, etc.                   |
// | `.`    | **Qualquer caractere**, exceto `\n` | `/./` encontra qualquer coisa (menos quebras de linha) |

// ---

// ## ‚úèÔ∏è Exemplos r√°pidos

// ### üìû Limpar um n√∫mero de telefone

// ```js
// let str = "+7(903)-123-45-67";

// // Op√ß√£o 1: pega todos os d√≠gitos e junta
// let result = str.match(/\d/g).join('');
// console.log(result); // "79031234567"

// // Op√ß√£o 2: remove tudo que **n√£o** for d√≠gito
// let result2 = str.replace(/\D/g, '');
// console.log(result2); // "79031234567"
// ```

// ---

// ## ‚õî Inversas com letras mai√∫sculas

// * `\d` ‚Üí d√≠gito
//   `\D` ‚Üí **n√£o** d√≠gito
// * `\s` ‚Üí espa√ßo
//   `\S` ‚Üí **n√£o** espa√ßo
// * `\w` ‚Üí caractere de palavra
//   `\W` ‚Üí **n√£o** caractere de palavra

// Exemplo:

// ```js
// "abc123".match(/\D/g); // ['a', 'b', 'c']
// ```

// ---

// ## ‚ö´ O ponto `.`: **qualquer caractere (menos `\n`)**

// ```js
// "A1".match(/./g); // ['A', '1']
// "A\nB".match(/A.B/); // null (ponto N√ÉO casa com \n)
// ```

// ### ‚úÖ Para que `.` case com qualquer caractere, inclusive `\n`:

// Use a flag `s`:

// ```js
// "A\nB".match(/A.B/s); // ["A\nB"]
// ```

// Ou use o truque compat√≠vel com qualquer navegador:

// ```js
// "A\nB".match(/A[\s\S]B/); // ["A\nB"]
// ```

// ---

// ## ‚ö†Ô∏è Espa√ßos importam!

// RegExp **n√£o ignora espa√ßos automaticamente**. Eles precisam estar **exatamente no padr√£o**.

// Errado (sem considerar espa√ßos):

// ```js
// "1 - 5".match(/\d-\d/); // null
// ```

// Correto:

// ```js
// "1 - 5".match(/\d\s-\s\d/); // ["1 - 5"]
// ```

// ---

// ## ‚úÖ Resumo das principais classes

// | Classe | Significa                       |
// | ------ | ------------------------------- |
// | `\d`   | D√≠gitos \[0-9]                  |
// | `\D`   | Tudo exceto d√≠gitos             |
// | `\s`   | Espa√ßo, tab, nova linha, etc    |
// | `\S`   | Tudo exceto espa√ßo              |
// | `\w`   | Letras latinas, n√∫meros e `_`   |
// | `\W`   | Tudo exceto `\w`                |
// | `.`    | Qualquer caractere (menos `\n`) |

// ---

// Se quiser, posso te mostrar exemplos com **valida√ß√£o de CEP, CPF, e-mail, senhas**, etc, usando essas classes. Quer seguir por esse caminho?
